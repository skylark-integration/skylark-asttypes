{"version":3,"sources":["def/type-annotations.js"],"names":["define","typesPlugin","sharedPlugin","fork","types","use","def","Type","or","defaults","TypeAnnotation","TypeParamDecl","field","build","Boolean","forEach","typeName","emptyArray"],"mappings":";;;;;;;AAAAA,QACI,WACA,aACD,SAAUC,EAAaC,GACtB,aACA,OAAO,SAAUC,GACb,IAAIC,EAAQD,EAAKE,IAAIJ,GACjBK,EAAMF,EAAMG,KAAKD,IACjBE,EAAKJ,EAAMG,KAAKC,GAChBC,EAAWN,EAAKE,IAAIH,GAAcO,SAClCC,EAAiBF,EAAGF,EAAI,kBAAmBA,EAAI,oBAAqB,MACpEK,EAAgBH,EAAGF,EAAI,4BAA6BA,EAAI,8BAA+B,MAC3FA,EAAI,cAAcM,MAAM,iBAAkBF,EAAgBD,EAAe,MACzEH,EAAI,iBAAiBM,MAAM,iBAAkBF,EAAgBD,EAAe,MAC5EH,EAAI,YAAYM,MAAM,aAAcF,EAAgBD,EAAe,MAAGG,MAAM,iBAAkBD,EAAeF,EAAe,MAC5HH,EAAI,iBAAiBO,MAAM,MAAO,QAAS,iBAAkB,UAAUD,MAAM,QAASJ,EAAGF,EAAI,cAAe,OAAOM,MAAM,SAAUE,QAASL,EAAgB,OAAGG,MAAM,iBAAkBF,EAAgBD,EAAe,OAElN,mBACA,mBACFM,QAAQC,IACNV,EAAIU,GAAUJ,MAAM,iBAAkBD,EAAeF,EAAe,MAAGG,MAAM,sBAAuBJ,EAAGF,EAAI,8BAA+BA,EAAI,gCAAiC,MAAOG,EAAe,MAAGG,MAAM,aAAcJ,GAAIF,EAAI,qBAAsBA,EAAI,mCAAoCG,EAASQ","file":"../../def/type-annotations.js","sourcesContent":["define([\n    '../types',\n    '../shared'\n], function (typesPlugin, sharedPlugin) {\n    'use strict';\n    return function (fork) {\n        var types = fork.use(typesPlugin);\n        var def = types.Type.def;\n        var or = types.Type.or;\n        var defaults = fork.use(sharedPlugin).defaults;\n        var TypeAnnotation = or(def('TypeAnnotation'), def('TSTypeAnnotation'), null);\n        var TypeParamDecl = or(def('TypeParameterDeclaration'), def('TSTypeParameterDeclaration'), null);\n        def('Identifier').field('typeAnnotation', TypeAnnotation, defaults['null']);\n        def('ObjectPattern').field('typeAnnotation', TypeAnnotation, defaults['null']);\n        def('Function').field('returnType', TypeAnnotation, defaults['null']).field('typeParameters', TypeParamDecl, defaults['null']);\n        def('ClassProperty').build('key', 'value', 'typeAnnotation', 'static').field('value', or(def('Expression'), null)).field('static', Boolean, defaults['false']).field('typeAnnotation', TypeAnnotation, defaults['null']);\n        [\n            'ClassDeclaration',\n            'ClassExpression'\n        ].forEach(typeName => {\n            def(typeName).field('typeParameters', TypeParamDecl, defaults['null']).field('superTypeParameters', or(def('TypeParameterInstantiation'), def('TSTypeParameterInstantiation'), null), defaults['null']).field('implements', or([def('ClassImplements')], [def('TSExpressionWithTypeArguments')]), defaults.emptyArray);\n        });\n    };\n});"]}