{"version":3,"sources":["def/type-annotations.js"],"names":["define","typesPlugin","sharedPlugin","fork","types","use","def","Type","or","defaults","TypeAnnotation","TypeParamDecl","field","build","Boolean","forEach","typeName","emptyArray"],"mappings":";;;;;;;AAAAA,OAAO,CACH,WACA,aACD,SAAUC,EAAaC,GACtB,aACA,OAAO,SAAUC,GACb,IAAIC,EAAQD,EAAKE,IAAIJ,CAAW,EAC5BK,EAAMF,EAAMG,KAAKD,IACjBE,EAAKJ,EAAMG,KAAKC,GAChBC,EAAWN,EAAKE,IAAIH,CAAY,EAAEO,SAClCC,EAAiBF,EAAGF,EAAI,gBAAgB,EAAGA,EAAI,kBAAkB,EAAG,IAAI,EACxEK,EAAgBH,EAAGF,EAAI,0BAA0B,EAAGA,EAAI,4BAA4B,EAAG,IAAI,EAC/FA,EAAI,YAAY,EAAEM,MAAM,iBAAkBF,EAAgBD,EAAe,IAAC,EAC1EH,EAAI,eAAe,EAAEM,MAAM,iBAAkBF,EAAgBD,EAAe,IAAC,EAC7EH,EAAI,UAAU,EAAEM,MAAM,aAAcF,EAAgBD,EAAe,IAAC,EAAEG,MAAM,iBAAkBD,EAAeF,EAAe,IAAC,EAC7HH,EAAI,eAAe,EAAEO,MAAM,MAAO,QAAS,iBAAkB,QAAQ,EAAED,MAAM,QAASJ,EAAGF,EAAI,YAAY,EAAG,IAAI,CAAC,EAAEM,MAAM,SAAUE,QAASL,EAAgB,KAAC,EAAEG,MAAM,iBAAkBF,EAAgBD,EAAe,IAAC,EACvN,CACI,mBACA,mBACFM,QAAQC,IACNV,EAAIU,CAAQ,EAAEJ,MAAM,iBAAkBD,EAAeF,EAAe,IAAC,EAAEG,MAAM,sBAAuBJ,EAAGF,EAAI,4BAA4B,EAAGA,EAAI,8BAA8B,EAAG,IAAI,EAAGG,EAAe,IAAC,EAAEG,MAAM,aAAcJ,EAAG,CAACF,EAAI,iBAAiB,GAAI,CAACA,EAAI,+BAA+B,EAAE,EAAGG,EAASQ,UAAU,CACzT,CAAC,CACL,CACJ,CAAC","file":"../../def/type-annotations.js","sourcesContent":["define([\n    '../types',\n    '../shared'\n], function (typesPlugin, sharedPlugin) {\n    'use strict';\n    return function (fork) {\n        var types = fork.use(typesPlugin);\n        var def = types.Type.def;\n        var or = types.Type.or;\n        var defaults = fork.use(sharedPlugin).defaults;\n        var TypeAnnotation = or(def('TypeAnnotation'), def('TSTypeAnnotation'), null);\n        var TypeParamDecl = or(def('TypeParameterDeclaration'), def('TSTypeParameterDeclaration'), null);\n        def('Identifier').field('typeAnnotation', TypeAnnotation, defaults['null']);\n        def('ObjectPattern').field('typeAnnotation', TypeAnnotation, defaults['null']);\n        def('Function').field('returnType', TypeAnnotation, defaults['null']).field('typeParameters', TypeParamDecl, defaults['null']);\n        def('ClassProperty').build('key', 'value', 'typeAnnotation', 'static').field('value', or(def('Expression'), null)).field('static', Boolean, defaults['false']).field('typeAnnotation', TypeAnnotation, defaults['null']);\n        [\n            'ClassDeclaration',\n            'ClassExpression'\n        ].forEach(typeName => {\n            def(typeName).field('typeParameters', TypeParamDecl, defaults['null']).field('superTypeParameters', or(def('TypeParameterInstantiation'), def('TSTypeParameterInstantiation'), null), defaults['null']).field('implements', or([def('ClassImplements')], [def('TSExpressionWithTypeArguments')]), defaults.emptyArray);\n        });\n    };\n});"]}