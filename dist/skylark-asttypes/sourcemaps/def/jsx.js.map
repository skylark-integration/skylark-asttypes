{"version":3,"sources":["def/jsx.js"],"names":["define","esProposalsDef","typesPlugin","sharedPlugin","fork","use","types","def","Type","or","defaults","JSXElementName","bases","build","field","String","Boolean","false","JSXAttributes","JSXChildren","emptyArray","this","openingElement","name","selfClosing","attributes","value"],"mappings":"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","file":"../../def/jsx.js","sourcesContent":["define([\n    './es-proposals',\n    '../types',\n    '../shared'\n], function (esProposalsDef, typesPlugin, sharedPlugin) {\n    'use strict';\n    return function (fork) {\n        fork.use(esProposalsDef);\n        const types = fork.use(typesPlugin);\n        const def = types.Type.def;\n        const or = types.Type.or;\n        const defaults = fork.use(sharedPlugin).defaults;\n        def('JSXAttribute').bases('Node').build('name', 'value').field('name', or(def('JSXIdentifier'), def('JSXNamespacedName'))).field('value', or(def('Literal'), def('JSXExpressionContainer'), def('JSXElement'), def('JSXFragment'), null), defaults['null']);\n        def('JSXIdentifier').bases('Identifier').build('name').field('name', String);\n        def('JSXNamespacedName').bases('Node').build('namespace', 'name').field('namespace', def('JSXIdentifier')).field('name', def('JSXIdentifier'));\n        def('JSXMemberExpression').bases('MemberExpression').build('object', 'property').field('object', or(def('JSXIdentifier'), def('JSXMemberExpression'))).field('property', def('JSXIdentifier')).field('computed', Boolean, defaults.false);\n        const JSXElementName = or(def('JSXIdentifier'), def('JSXNamespacedName'), def('JSXMemberExpression'));\n        def('JSXSpreadAttribute').bases('Node').build('argument').field('argument', def('Expression'));\n        const JSXAttributes = [or(def('JSXAttribute'), def('JSXSpreadAttribute'))];\n        def('JSXExpressionContainer').bases('Expression').build('expression').field('expression', or(def('Expression'), def('JSXEmptyExpression')));\n        const JSXChildren = [or(def('JSXText'), def('JSXExpressionContainer'), def('JSXSpreadChild'), def('JSXElement'), def('JSXFragment'), def('Literal'))];\n        def('JSXElement').bases('Expression').build('openingElement', 'closingElement', 'children').field('openingElement', def('JSXOpeningElement')).field('closingElement', or(def('JSXClosingElement'), null), defaults['null']).field('children', JSXChildren, defaults.emptyArray).field('name', JSXElementName, function () {\n            return this.openingElement.name;\n        }, true).field('selfClosing', Boolean, function () {\n            return this.openingElement.selfClosing;\n        }, true).field('attributes', JSXAttributes, function () {\n            return this.openingElement.attributes;\n        }, true);\n        def('JSXOpeningElement').bases('Node').build('name', 'attributes', 'selfClosing').field('name', JSXElementName).field('attributes', JSXAttributes, defaults.emptyArray).field('selfClosing', Boolean, defaults['false']);\n        def('JSXClosingElement').bases('Node').build('name').field('name', JSXElementName);\n        def('JSXFragment').bases('Expression').build('openingFragment', 'closingFragment', 'children').field('openingFragment', def('JSXOpeningFragment')).field('closingFragment', def('JSXClosingFragment')).field('children', JSXChildren, defaults.emptyArray);\n        def('JSXOpeningFragment').bases('Node').build();\n        def('JSXClosingFragment').bases('Node').build();\n        def('JSXText').bases('Literal').build('value', 'raw').field('value', String).field('raw', String, function () {\n            return this.value;\n        });\n        def('JSXEmptyExpression').bases('Node').build();\n        def('JSXSpreadChild').bases('Node').build('expression').field('expression', def('Expression'));\n    };\n});"]}