{"version":3,"sources":["def/es-proposals.js"],"names":["define","typesPlugin","es2022Def","fork","use","types","Type","def","or","defaults","sharedPlugin","build","field","Boolean","bases","forEach","decl","emptyArray"],"mappings":";;;;;;;AAAAA,QACI,WACA,YACD,SAAUC,EAAaC,GACtB,aACA,OAAO,SAAUC,GACbA,EAAKC,IAAIF,GACT,MAAMG,EAAQF,EAAKC,IAAIH,GACjBK,EAAOD,EAAMC,KACbC,EAAMF,EAAMC,KAAKC,IACjBC,EAAKF,EAAKE,GAEVC,EADSN,EAAKC,IAAIM,cACAD,SACxBF,EAAI,mBAAmBI,MAAM,WAAY,OAAOC,MAAM,WAAYJ,EAAGD,EAAI,cAAe,OAAOK,MAAM,MAAOC,QAASJ,EAAgB,OACrIF,EAAI,aAAaO,MAAM,QAAQH,MAAM,cAAcC,MAAM,aAAcL,EAAI,eAC3EA,EAAI,YAAYK,MAAM,aAAcJ,GAAID,EAAI,cAAe,MAAOE,EAAe,MACjFF,EAAI,oBAAoBK,MAAM,aAAcJ,GAAID,EAAI,cAAe,MAAOE,EAAe,MACzFF,EAAI,eAAeO,MAAM,aAAc,WAAWH,MAAM,MAAMC,MAAM,KAAML,EAAI,eAC9EA,EAAI,wBAAwBO,MAAM,iBAAiBH,MAAM,MAAO,SAASC,MAAM,MAAOL,EAAI,gBAAgBK,MAAM,QAASJ,EAAGD,EAAI,cAAe,MAAOE,EAAe,MACrKF,EAAI,mBAAmBO,MAAM,QAAQH,MAAM,MAAO,SAASC,MAAM,MAAOJ,EAAGD,EAAI,cAAeA,EAAI,aAAaK,MAAM,QAASL,EAAI,gBAE9H,oBACA,uBACA,0BACFQ,QAAQC,IACNT,EAAIS,GAAMJ,MAAM,cAAeL,EAAI,oBAAqBE,EAASQ,cAErEV,EAAI,oBAAoBO,MAAM,cAAcH,MAAM,cAAcC,MAAM,cAAeJ,EAAGD,EAAI,kBAAmBA,EAAI,gBAAiBA,EAAI,oBACxIA,EAAI,mBAAmBO,MAAM,cAAcH,MAAM,YAAYC,MAAM,YAAaJ,EAAGD,EAAI,cAAeA,EAAI,iBAAkB,QAC5HA,EAAI,oBAAoBO,MAAM,QAAQH,MAAM,QAAQC,MAAM,OAAQL,EAAI","file":"../../def/es-proposals.js","sourcesContent":["define([\n    '../types',\n    './es2022'\n], function (typesPlugin, es2022Def) {\n    'use strict';\n    return function (fork) {\n        fork.use(es2022Def);\n        const types = fork.use(typesPlugin);\n        const Type = types.Type;\n        const def = types.Type.def;\n        const or = Type.or;\n        const shared = fork.use(sharedPlugin);\n        const defaults = shared.defaults;\n        def('AwaitExpression').build('argument', 'all').field('argument', or(def('Expression'), null)).field('all', Boolean, defaults['false']);\n        def('Decorator').bases('Node').build('expression').field('expression', def('Expression'));\n        def('Property').field('decorators', or([def('Decorator')], null), defaults['null']);\n        def('MethodDefinition').field('decorators', or([def('Decorator')], null), defaults['null']);\n        def('PrivateName').bases('Expression', 'Pattern').build('id').field('id', def('Identifier'));\n        def('ClassPrivateProperty').bases('ClassProperty').build('key', 'value').field('key', def('PrivateName')).field('value', or(def('Expression'), null), defaults['null']);\n        def('ImportAttribute').bases('Node').build('key', 'value').field('key', or(def('Identifier'), def('Literal'))).field('value', def('Expression'));\n        [\n            'ImportDeclaration',\n            'ExportAllDeclaration',\n            'ExportNamedDeclaration'\n        ].forEach(decl => {\n            def(decl).field('assertions', [def('ImportAttribute')], defaults.emptyArray);\n        });\n        def('RecordExpression').bases('Expression').build('properties').field('properties', [or(def('ObjectProperty'), def('ObjectMethod'), def('SpreadElement'))]);\n        def('TupleExpression').bases('Expression').build('elements').field('elements', [or(def('Expression'), def('SpreadElement'), null)]);\n        def('ModuleExpression').bases('Node').build('body').field('body', def('Program'));\n    };\n});"]}