{"version":3,"sources":["def/es2020.js"],"names":["define","es2020OpsDef","es2019Def","typesPlugin","sharedPlugin","fork","use","types","def","Type","or","defaults","bases","build","field","Boolean"],"mappings":";;;;;;;AAAAA,QACI,qBACA,WACA,WACA,aACD,SAAUC,EAAcC,EAAWC,EAAaC,GAC/C,aACA,OAAO,SAAUC,GACbA,EAAKC,IAAIL,GACTI,EAAKC,IAAIJ,GACT,MAAMK,EAAQF,EAAKC,IAAIH,GACjBK,EAAMD,EAAME,KAAKD,IACjBE,EAAKH,EAAME,KAAKC,GAEhBC,EADSN,EAAKC,IAAIF,GACAO,SACxBH,EAAI,oBAAoBI,MAAM,cAAcC,MAAM,UAAUC,MAAM,SAAUN,EAAI,eAChFA,EAAI,wBAAwBI,MAAM,eAAeC,MAAM,SAAU,YAAYC,MAAM,SAAUN,EAAI,YAAYM,MAAM,WAAYJ,EAAGF,EAAI,cAAe,UAAM,GAASG,EAAe,MACnLH,EAAI,gBAAgBI,MAAM,QAAQE,MAAM,WAAYC,QAASJ,EAAgB,OAC7EH,EAAI,kBAAkBI,MAAM,aAAc,gBAC1CJ,EAAI,oBAAoBI,MAAM,aAAc,gBAC5CJ,EAAI,mBAAmBI,MAAM,cAAcC,MAAM,cAAcC,MAAM,aAAcN,EAAI,iBACvFA,EAAI,0BAA0BI,MAAM,kBAAkBC,MAAM,SAAU,YAAa,YAAYC,MAAM,WAAYC,QAASJ,EAAe,MACzIH,EAAI,4BAA4BI,MAAM,oBAAoBC,MAAM,SAAU,WAAY,WAAY,YAAYC,MAAM,WAAYC,QAASJ,EAAe","file":"../../def/es2020.js","sourcesContent":["define([\n    './operators/es2020',\n    './es2019',\n    '../types',\n    '../shared'\n], function (es2020OpsDef, es2019Def, typesPlugin, sharedPlugin) {\n    'use strict';\n    return function (fork) {\n        fork.use(es2020OpsDef);\n        fork.use(es2019Def);\n        const types = fork.use(typesPlugin);\n        const def = types.Type.def;\n        const or = types.Type.or;\n        const shared = fork.use(sharedPlugin);\n        const defaults = shared.defaults;\n        def('ImportExpression').bases('Expression').build('source').field('source', def('Expression'));\n        def('ExportAllDeclaration').bases('Declaration').build('source', 'exported').field('source', def('Literal')).field('exported', or(def('Identifier'), null, void 0), defaults['null']);\n        def('ChainElement').bases('Node').field('optional', Boolean, defaults['false']);\n        def('CallExpression').bases('Expression', 'ChainElement');\n        def('MemberExpression').bases('Expression', 'ChainElement');\n        def('ChainExpression').bases('Expression').build('expression').field('expression', def('ChainElement'));\n        def('OptionalCallExpression').bases('CallExpression').build('callee', 'arguments', 'optional').field('optional', Boolean, defaults['true']);\n        def('OptionalMemberExpression').bases('MemberExpression').build('object', 'property', 'computed', 'optional').field('optional', Boolean, defaults['true']);\n    };\n});"]}