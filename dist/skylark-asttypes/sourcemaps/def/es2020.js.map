{"version":3,"sources":["def/es2020.js"],"names":["define","es2020OpsDef","es2019Def","typesPlugin","sharedPlugin","fork","use","types","def","Type","or","defaults","bases","build","field","Boolean"],"mappings":";;;;;;;AAAAA,OAAO,CACH,qBACA,WACA,WACA,aACD,SAAUC,EAAcC,EAAWC,EAAaC,GAC/C,aACA,OAAO,SAAUC,GACbA,EAAKC,IAAIL,CAAY,EACrBI,EAAKC,IAAIJ,CAAS,EAClB,IAAMK,EAAQF,EAAKC,IAAIH,CAAW,EAC5BK,EAAMD,EAAME,KAAKD,IACjBE,EAAKH,EAAME,KAAKC,GAEhBC,EADSN,EAAKC,IAAIF,CAAY,EACZO,SACxBH,EAAI,kBAAkB,EAAEI,MAAM,YAAY,EAAEC,MAAM,QAAQ,EAAEC,MAAM,SAAUN,EAAI,YAAY,CAAC,EAC7FA,EAAI,sBAAsB,EAAEI,MAAM,aAAa,EAAEC,MAAM,SAAU,UAAU,EAAEC,MAAM,SAAUN,EAAI,SAAS,CAAC,EAAEM,MAAM,WAAYJ,EAAGF,EAAI,YAAY,EAAG,KAAM,KAAA,CAAM,EAAGG,EAAe,IAAC,EACpLH,EAAI,cAAc,EAAEI,MAAM,MAAM,EAAEE,MAAM,WAAYC,QAASJ,EAAgB,KAAC,EAC9EH,EAAI,gBAAgB,EAAEI,MAAM,aAAc,cAAc,EACxDJ,EAAI,kBAAkB,EAAEI,MAAM,aAAc,cAAc,EAC1DJ,EAAI,iBAAiB,EAAEI,MAAM,YAAY,EAAEC,MAAM,YAAY,EAAEC,MAAM,aAAcN,EAAI,cAAc,CAAC,EACtGA,EAAI,wBAAwB,EAAEI,MAAM,gBAAgB,EAAEC,MAAM,SAAU,YAAa,UAAU,EAAEC,MAAM,WAAYC,QAASJ,EAAe,IAAC,EAC1IH,EAAI,0BAA0B,EAAEI,MAAM,kBAAkB,EAAEC,MAAM,SAAU,WAAY,WAAY,UAAU,EAAEC,MAAM,WAAYC,QAASJ,EAAe,IAAC,CAC7J,CACJ,CAAC","file":"../../def/es2020.js","sourcesContent":["define([\n    './operators/es2020',\n    './es2019',\n    '../types',\n    '../shared'\n], function (es2020OpsDef, es2019Def, typesPlugin, sharedPlugin) {\n    'use strict';\n    return function (fork) {\n        fork.use(es2020OpsDef);\n        fork.use(es2019Def);\n        const types = fork.use(typesPlugin);\n        const def = types.Type.def;\n        const or = types.Type.or;\n        const shared = fork.use(sharedPlugin);\n        const defaults = shared.defaults;\n        def('ImportExpression').bases('Expression').build('source').field('source', def('Expression'));\n        def('ExportAllDeclaration').bases('Declaration').build('source', 'exported').field('source', def('Literal')).field('exported', or(def('Identifier'), null, void 0), defaults['null']);\n        def('ChainElement').bases('Node').field('optional', Boolean, defaults['false']);\n        def('CallExpression').bases('Expression', 'ChainElement');\n        def('MemberExpression').bases('Expression', 'ChainElement');\n        def('ChainExpression').bases('Expression').build('expression').field('expression', def('ChainElement'));\n        def('OptionalCallExpression').bases('CallExpression').build('callee', 'arguments', 'optional').field('optional', Boolean, defaults['true']);\n        def('OptionalMemberExpression').bases('MemberExpression').build('object', 'property', 'computed', 'optional').field('optional', Boolean, defaults['true']);\n    };\n});"]}