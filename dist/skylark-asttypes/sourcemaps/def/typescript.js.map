{"version":3,"sources":["def/typescript.js"],"names":["define","babelCoreDef","typeAnnotationsDef","typesPlugin","sharedPlugin","fork","use","types","n","namedTypes","def","Type","or","defaults","StringLiteral","from","value","deep","check","Literal","bases","TSEntityName","build","field","parenthesized","Boolean","forEach","keywordType","typeName","ParametersType","String","TSTypeMember"],"mappings":"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","file":"../../def/typescript.js","sourcesContent":["define([\n    './babel-core',\n    './type-annotations',\n    '../types',\n    '../shared'\n], function (babelCoreDef, typeAnnotationsDef, typesPlugin, sharedPlugin) {\n    'use strict';\n    return function (fork) {\n        fork.use(babelCoreDef);\n        fork.use(typeAnnotationsDef);\n        var types = fork.use(typesPlugin);\n        var n = types.namedTypes;\n        var def = types.Type.def;\n        var or = types.Type.or;\n        var defaults = fork.use(sharedPlugin).defaults;\n        var StringLiteral = types.Type.from(function (value, deep) {\n            if (n.StringLiteral && n.StringLiteral.check(value, deep)) {\n                return true;\n            }\n            if (n.Literal && n.Literal.check(value, deep) && typeof value.value === 'string') {\n                return true;\n            }\n            return false;\n        }, 'StringLiteral');\n        def('TSType').bases('Node');\n        var TSEntityName = or(def('Identifier'), def('TSQualifiedName'));\n        def('TSTypeReference').bases('TSType', 'TSHasOptionalTypeParameterInstantiation').build('typeName', 'typeParameters').field('typeName', TSEntityName);\n        def('TSHasOptionalTypeParameterInstantiation').field('typeParameters', or(def('TSTypeParameterInstantiation'), null), defaults['null']);\n        def('TSHasOptionalTypeParameters').field('typeParameters', or(def('TSTypeParameterDeclaration'), null, void 0), defaults['null']);\n        def('TSHasOptionalTypeAnnotation').field('typeAnnotation', or(def('TSTypeAnnotation'), null), defaults['null']);\n        def('TSQualifiedName').bases('Node').build('left', 'right').field('left', TSEntityName).field('right', TSEntityName);\n        def('TSAsExpression').bases('Expression', 'Pattern').build('expression', 'typeAnnotation').field('expression', def('Expression')).field('typeAnnotation', def('TSType')).field('extra', or({ parenthesized: Boolean }, null), defaults['null']);\n        def('TSTypeCastExpression').bases('Expression').build('expression', 'typeAnnotation').field('expression', def('Expression')).field('typeAnnotation', def('TSType'));\n        def('TSSatisfiesExpression').bases('Expression', 'Pattern').build('expression', 'typeAnnotation').field('expression', def('Expression')).field('typeAnnotation', def('TSType'));\n        def('TSNonNullExpression').bases('Expression', 'Pattern').build('expression').field('expression', def('Expression'));\n        [\n            'TSAnyKeyword',\n            'TSBigIntKeyword',\n            'TSBooleanKeyword',\n            'TSNeverKeyword',\n            'TSNullKeyword',\n            'TSNumberKeyword',\n            'TSObjectKeyword',\n            'TSStringKeyword',\n            'TSSymbolKeyword',\n            'TSUndefinedKeyword',\n            'TSUnknownKeyword',\n            'TSVoidKeyword',\n            'TSIntrinsicKeyword',\n            'TSThisType'\n        ].forEach(keywordType => {\n            def(keywordType).bases('TSType').build();\n        });\n        def('TSArrayType').bases('TSType').build('elementType').field('elementType', def('TSType'));\n        def('TSLiteralType').bases('TSType').build('literal').field('literal', or(def('NumericLiteral'), def('StringLiteral'), def('BooleanLiteral'), def('TemplateLiteral'), def('UnaryExpression'), def('BigIntLiteral')));\n        def('TemplateLiteral').field('expressions', or([def('Expression')], [def('TSType')]));\n        [\n            'TSUnionType',\n            'TSIntersectionType'\n        ].forEach(typeName => {\n            def(typeName).bases('TSType').build('types').field('types', [def('TSType')]);\n        });\n        def('TSConditionalType').bases('TSType').build('checkType', 'extendsType', 'trueType', 'falseType').field('checkType', def('TSType')).field('extendsType', def('TSType')).field('trueType', def('TSType')).field('falseType', def('TSType'));\n        def('TSInferType').bases('TSType').build('typeParameter').field('typeParameter', def('TSTypeParameter'));\n        def('TSParenthesizedType').bases('TSType').build('typeAnnotation').field('typeAnnotation', def('TSType'));\n        var ParametersType = [or(def('Identifier'), def('RestElement'), def('ArrayPattern'), def('ObjectPattern'))];\n        [\n            'TSFunctionType',\n            'TSConstructorType'\n        ].forEach(typeName => {\n            def(typeName).bases('TSType', 'TSHasOptionalTypeParameters', 'TSHasOptionalTypeAnnotation').build('parameters').field('parameters', ParametersType);\n        });\n        def('TSDeclareFunction').bases('Declaration', 'TSHasOptionalTypeParameters').build('id', 'params', 'returnType').field('declare', Boolean, defaults['false']).field('async', Boolean, defaults['false']).field('generator', Boolean, defaults['false']).field('id', or(def('Identifier'), null), defaults['null']).field('params', [def('Pattern')]).field('returnType', or(def('TSTypeAnnotation'), def('Noop'), null), defaults['null']);\n        def('TSDeclareMethod').bases('Declaration', 'TSHasOptionalTypeParameters').build('key', 'params', 'returnType').field('async', Boolean, defaults['false']).field('generator', Boolean, defaults['false']).field('params', [def('Pattern')]).field('abstract', Boolean, defaults['false']).field('accessibility', or('public', 'private', 'protected', void 0), defaults['undefined']).field('static', Boolean, defaults['false']).field('computed', Boolean, defaults['false']).field('optional', Boolean, defaults['false']).field('key', or(def('Identifier'), def('StringLiteral'), def('NumericLiteral'), def('Expression'))).field('kind', or('get', 'set', 'method', 'constructor'), function getDefault() {\n            return 'method';\n        }).field('access', or('public', 'private', 'protected', void 0), defaults['undefined']).field('decorators', or([def('Decorator')], null), defaults['null']).field('returnType', or(def('TSTypeAnnotation'), def('Noop'), null), defaults['null']);\n        def('TSMappedType').bases('TSType').build('typeParameter', 'typeAnnotation').field('readonly', or(Boolean, '+', '-'), defaults['false']).field('typeParameter', def('TSTypeParameter')).field('optional', or(Boolean, '+', '-'), defaults['false']).field('typeAnnotation', or(def('TSType'), null), defaults['null']);\n        def('TSTupleType').bases('TSType').build('elementTypes').field('elementTypes', [or(def('TSType'), def('TSNamedTupleMember'))]);\n        def('TSNamedTupleMember').bases('TSType').build('label', 'elementType', 'optional').field('label', def('Identifier')).field('optional', Boolean, defaults['false']).field('elementType', def('TSType'));\n        def('TSRestType').bases('TSType').build('typeAnnotation').field('typeAnnotation', def('TSType'));\n        def('TSOptionalType').bases('TSType').build('typeAnnotation').field('typeAnnotation', def('TSType'));\n        def('TSIndexedAccessType').bases('TSType').build('objectType', 'indexType').field('objectType', def('TSType')).field('indexType', def('TSType'));\n        def('TSTypeOperator').bases('TSType').build('operator').field('operator', String).field('typeAnnotation', def('TSType'));\n        def('TSTypeAnnotation').bases('Node').build('typeAnnotation').field('typeAnnotation', or(def('TSType'), def('TSTypeAnnotation')));\n        def('TSIndexSignature').bases('Declaration', 'TSHasOptionalTypeAnnotation').build('parameters', 'typeAnnotation').field('parameters', [def('Identifier')]).field('readonly', Boolean, defaults['false']);\n        def('TSPropertySignature').bases('Declaration', 'TSHasOptionalTypeAnnotation').build('key', 'typeAnnotation', 'optional').field('key', def('Expression')).field('computed', Boolean, defaults['false']).field('readonly', Boolean, defaults['false']).field('optional', Boolean, defaults['false']).field('initializer', or(def('Expression'), null), defaults['null']);\n        def('TSMethodSignature').bases('Declaration', 'TSHasOptionalTypeParameters', 'TSHasOptionalTypeAnnotation').build('key', 'parameters', 'typeAnnotation').field('key', def('Expression')).field('computed', Boolean, defaults['false']).field('optional', Boolean, defaults['false']).field('parameters', ParametersType);\n        def('TSTypePredicate').bases('TSTypeAnnotation', 'TSType').build('parameterName', 'typeAnnotation', 'asserts').field('parameterName', or(def('Identifier'), def('TSThisType'))).field('typeAnnotation', or(def('TSTypeAnnotation'), null), defaults['null']).field('asserts', Boolean, defaults['false']);\n        [\n            'TSCallSignatureDeclaration',\n            'TSConstructSignatureDeclaration'\n        ].forEach(typeName => {\n            def(typeName).bases('Declaration', 'TSHasOptionalTypeParameters', 'TSHasOptionalTypeAnnotation').build('parameters', 'typeAnnotation').field('parameters', ParametersType);\n        });\n        def('TSEnumMember').bases('Node').build('id', 'initializer').field('id', or(def('Identifier'), StringLiteral)).field('initializer', or(def('Expression'), null), defaults['null']);\n        def('TSTypeQuery').bases('TSType').build('exprName').field('exprName', or(TSEntityName, def('TSImportType')));\n        var TSTypeMember = or(def('TSCallSignatureDeclaration'), def('TSConstructSignatureDeclaration'), def('TSIndexSignature'), def('TSMethodSignature'), def('TSPropertySignature'));\n        def('TSTypeLiteral').bases('TSType').build('members').field('members', [TSTypeMember]);\n        def('TSTypeParameter').bases('Identifier').build('name', 'constraint', 'default').field('name', or(def('Identifier'), String)).field('constraint', or(def('TSType'), void 0), defaults['undefined']).field('default', or(def('TSType'), void 0), defaults['undefined']);\n        def('TSTypeAssertion').bases('Expression', 'Pattern').build('typeAnnotation', 'expression').field('typeAnnotation', def('TSType')).field('expression', def('Expression')).field('extra', or({ parenthesized: Boolean }, null), defaults['null']);\n        def('TSTypeParameterDeclaration').bases('Declaration').build('params').field('params', [def('TSTypeParameter')]);\n        def('TSInstantiationExpression').bases('Expression', 'TSHasOptionalTypeParameterInstantiation').build('expression', 'typeParameters').field('expression', def('Expression'));\n        def('TSTypeParameterInstantiation').bases('Node').build('params').field('params', [def('TSType')]);\n        def('TSEnumDeclaration').bases('Declaration').build('id', 'members').field('id', def('Identifier')).field('const', Boolean, defaults['false']).field('declare', Boolean, defaults['false']).field('members', [def('TSEnumMember')]).field('initializer', or(def('Expression'), null), defaults['null']);\n        def('TSTypeAliasDeclaration').bases('Declaration', 'TSHasOptionalTypeParameters').build('id', 'typeAnnotation').field('id', def('Identifier')).field('declare', Boolean, defaults['false']).field('typeAnnotation', def('TSType'));\n        def('TSModuleBlock').bases('Node').build('body').field('body', [def('Statement')]);\n        def('TSModuleDeclaration').bases('Declaration').build('id', 'body').field('id', or(StringLiteral, TSEntityName)).field('declare', Boolean, defaults['false']).field('global', Boolean, defaults['false']).field('body', or(def('TSModuleBlock'), def('TSModuleDeclaration'), null), defaults['null']);\n        def('TSImportType').bases('TSType', 'TSHasOptionalTypeParameterInstantiation').build('argument', 'qualifier', 'typeParameters').field('argument', StringLiteral).field('qualifier', or(TSEntityName, void 0), defaults['undefined']);\n        def('TSImportEqualsDeclaration').bases('Declaration').build('id', 'moduleReference').field('id', def('Identifier')).field('isExport', Boolean, defaults['false']).field('moduleReference', or(TSEntityName, def('TSExternalModuleReference')));\n        def('TSExternalModuleReference').bases('Declaration').build('expression').field('expression', StringLiteral);\n        def('TSExportAssignment').bases('Statement').build('expression').field('expression', def('Expression'));\n        def('TSNamespaceExportDeclaration').bases('Declaration').build('id').field('id', def('Identifier'));\n        def('TSInterfaceBody').bases('Node').build('body').field('body', [TSTypeMember]);\n        def('TSExpressionWithTypeArguments').bases('TSType', 'TSHasOptionalTypeParameterInstantiation').build('expression', 'typeParameters').field('expression', TSEntityName);\n        def('TSInterfaceDeclaration').bases('Declaration', 'TSHasOptionalTypeParameters').build('id', 'body').field('id', TSEntityName).field('declare', Boolean, defaults['false']).field('extends', or([def('TSExpressionWithTypeArguments')], null), defaults['null']).field('body', def('TSInterfaceBody'));\n        def('TSParameterProperty').bases('Pattern').build('parameter').field('accessibility', or('public', 'private', 'protected', void 0), defaults['undefined']).field('readonly', Boolean, defaults['false']).field('parameter', or(def('Identifier'), def('AssignmentPattern')));\n        def('ClassProperty').field('access', or('public', 'private', 'protected', void 0), defaults['undefined']);\n        def('ClassAccessorProperty').bases('Declaration', 'TSHasOptionalTypeAnnotation');\n        def('ClassBody').field('body', [or(def('MethodDefinition'), def('VariableDeclarator'), def('ClassPropertyDefinition'), def('ClassProperty'), def('ClassPrivateProperty'), def('ClassAccessorProperty'), def('ClassMethod'), def('ClassPrivateMethod'), def('StaticBlock'), def('TSDeclareMethod'), TSTypeMember)]);\n    };\n    ;\n});"]}