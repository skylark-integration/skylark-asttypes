{"version":3,"sources":["def/core.js"],"names":["define","coreOpsDef","typesPlugin","fork","Type","use","def","or","shared","sharedPlugin","defaults","geq","BinaryOperators","AssignmentOperators","LogicalOperators","field","bases","String","build","Boolean","this","handlers","handler","emptyArray","UnaryOperator","BinaryOperator","AssignmentOperator","UpdateOperator","LogicalOperator","type","property","Number","RegExp","BigInt"],"mappings":"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","file":"../../def/core.js","sourcesContent":["define([\n    './operators/core',\n    '../types'\n], function (coreOpsDef, typesPlugin) {\n    'use strict';\n    return function (fork) {\n        var types = fork.use(typesPlugin);\n        var Type = types.Type;\n        var def = Type.def;\n        var or = Type.or;\n        var shared = fork.use(sharedPlugin);\n        var defaults = shared.defaults;\n        var geq = shared.geq;\n        const {BinaryOperators, AssignmentOperators, LogicalOperators} = fork.use(coreOpsDef);\n        def('Printable').field('loc', or(def('SourceLocation'), null), defaults['null'], true);\n        def('Node').bases('Printable').field('type', String).field('comments', or([def('Comment')], null), defaults['null'], true);\n        def('SourceLocation').field('start', def('Position')).field('end', def('Position')).field('source', or(String, null), defaults['null']);\n        def('Position').field('line', geq(1)).field('column', geq(0));\n        def('File').bases('Node').build('program', 'name').field('program', def('Program')).field('name', or(String, null), defaults['null']);\n        def('Program').bases('Node').build('body').field('body', [def('Statement')]);\n        def('Function').bases('Node').field('id', or(def('Identifier'), null), defaults['null']).field('params', [def('Pattern')]).field('body', def('BlockStatement')).field('generator', Boolean, defaults['false']).field('async', Boolean, defaults['false']);\n        def('Statement').bases('Node');\n        def('EmptyStatement').bases('Statement').build();\n        def('BlockStatement').bases('Statement').build('body').field('body', [def('Statement')]);\n        def('ExpressionStatement').bases('Statement').build('expression').field('expression', def('Expression'));\n        def('IfStatement').bases('Statement').build('test', 'consequent', 'alternate').field('test', def('Expression')).field('consequent', def('Statement')).field('alternate', or(def('Statement'), null), defaults['null']);\n        def('LabeledStatement').bases('Statement').build('label', 'body').field('label', def('Identifier')).field('body', def('Statement'));\n        def('BreakStatement').bases('Statement').build('label').field('label', or(def('Identifier'), null), defaults['null']);\n        def('ContinueStatement').bases('Statement').build('label').field('label', or(def('Identifier'), null), defaults['null']);\n        def('WithStatement').bases('Statement').build('object', 'body').field('object', def('Expression')).field('body', def('Statement'));\n        def('SwitchStatement').bases('Statement').build('discriminant', 'cases', 'lexical').field('discriminant', def('Expression')).field('cases', [def('SwitchCase')]).field('lexical', Boolean, defaults['false']);\n        def('ReturnStatement').bases('Statement').build('argument').field('argument', or(def('Expression'), null));\n        def('ThrowStatement').bases('Statement').build('argument').field('argument', def('Expression'));\n        def('TryStatement').bases('Statement').build('block', 'handler', 'finalizer').field('block', def('BlockStatement')).field('handler', or(def('CatchClause'), null), function () {\n            return this.handlers && this.handlers[0] || null;\n        }).field('handlers', [def('CatchClause')], function () {\n            return this.handler ? [this.handler] : [];\n        }, true).field('guardedHandlers', [def('CatchClause')], defaults.emptyArray).field('finalizer', or(def('BlockStatement'), null), defaults['null']);\n        def('CatchClause').bases('Node').build('param', 'guard', 'body').field('param', def('Pattern')).field('guard', or(def('Expression'), null), defaults['null']).field('body', def('BlockStatement'));\n        def('WhileStatement').bases('Statement').build('test', 'body').field('test', def('Expression')).field('body', def('Statement'));\n        def('DoWhileStatement').bases('Statement').build('body', 'test').field('body', def('Statement')).field('test', def('Expression'));\n        def('ForStatement').bases('Statement').build('init', 'test', 'update', 'body').field('init', or(def('VariableDeclaration'), def('Expression'), null)).field('test', or(def('Expression'), null)).field('update', or(def('Expression'), null)).field('body', def('Statement'));\n        def('ForInStatement').bases('Statement').build('left', 'right', 'body').field('left', or(def('VariableDeclaration'), def('Expression'))).field('right', def('Expression')).field('body', def('Statement'));\n        def('DebuggerStatement').bases('Statement').build();\n        def('Declaration').bases('Statement');\n        def('FunctionDeclaration').bases('Function', 'Declaration').build('id', 'params', 'body').field('id', def('Identifier'));\n        def('FunctionExpression').bases('Function', 'Expression').build('id', 'params', 'body');\n        def('VariableDeclaration').bases('Declaration').build('kind', 'declarations').field('kind', or('var', 'let', 'const')).field('declarations', [def('VariableDeclarator')]);\n        def('VariableDeclarator').bases('Node').build('id', 'init').field('id', def('Pattern')).field('init', or(def('Expression'), null), defaults['null']);\n        def('Expression').bases('Node');\n        def('ThisExpression').bases('Expression').build();\n        def('ArrayExpression').bases('Expression').build('elements').field('elements', [or(def('Expression'), null)]);\n        def('ObjectExpression').bases('Expression').build('properties').field('properties', [def('Property')]);\n        def('Property').bases('Node').build('kind', 'key', 'value').field('kind', or('init', 'get', 'set')).field('key', or(def('Literal'), def('Identifier'))).field('value', def('Expression'));\n        def('SequenceExpression').bases('Expression').build('expressions').field('expressions', [def('Expression')]);\n        var UnaryOperator = or('-', '+', '!', '~', 'typeof', 'void', 'delete');\n        def('UnaryExpression').bases('Expression').build('operator', 'argument', 'prefix').field('operator', UnaryOperator).field('argument', def('Expression')).field('prefix', Boolean, defaults['true']);\n        const BinaryOperator = or(...BinaryOperators);\n        def('BinaryExpression').bases('Expression').build('operator', 'left', 'right').field('operator', BinaryOperator).field('left', def('Expression')).field('right', def('Expression'));\n        const AssignmentOperator = or(...AssignmentOperators);\n        def('AssignmentExpression').bases('Expression').build('operator', 'left', 'right').field('operator', AssignmentOperator).field('left', or(def('Pattern'), def('MemberExpression'))).field('right', def('Expression'));\n        var UpdateOperator = or('++', '--');\n        def('UpdateExpression').bases('Expression').build('operator', 'argument', 'prefix').field('operator', UpdateOperator).field('argument', def('Expression')).field('prefix', Boolean);\n        var LogicalOperator = or(...LogicalOperators);\n        def('LogicalExpression').bases('Expression').build('operator', 'left', 'right').field('operator', LogicalOperator).field('left', def('Expression')).field('right', def('Expression'));\n        def('ConditionalExpression').bases('Expression').build('test', 'consequent', 'alternate').field('test', def('Expression')).field('consequent', def('Expression')).field('alternate', def('Expression'));\n        def('NewExpression').bases('Expression').build('callee', 'arguments').field('callee', def('Expression')).field('arguments', [def('Expression')]);\n        def('CallExpression').bases('Expression').build('callee', 'arguments').field('callee', def('Expression')).field('arguments', [def('Expression')]);\n        def('MemberExpression').bases('Expression').build('object', 'property', 'computed').field('object', def('Expression')).field('property', or(def('Identifier'), def('Expression'))).field('computed', Boolean, function () {\n            var type = this.property.type;\n            if (type === 'Literal' || type === 'MemberExpression' || type === 'BinaryExpression') {\n                return true;\n            }\n            return false;\n        });\n        def('Pattern').bases('Node');\n        def('SwitchCase').bases('Node').build('test', 'consequent').field('test', or(def('Expression'), null)).field('consequent', [def('Statement')]);\n        def('Identifier').bases('Expression', 'Pattern').build('name').field('name', String).field('optional', Boolean, defaults['false']);\n        def('Literal').bases('Expression').build('value').field('value', or(String, Boolean, null, Number, RegExp, BigInt));\n        def('Comment').bases('Printable').field('value', String).field('leading', Boolean, defaults['true']).field('trailing', Boolean, defaults['false']);\n    };\n});"]}