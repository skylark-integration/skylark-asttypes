{"version":3,"sources":["types.js"],"names":["define","Op","Object","prototype","objToStr","toString","hasOwn","hasOwnProperty","BaseType","assert","value","deep","this","check","str","shallowStringify","Error","arrayOf","ArrayType","constructor","elemType","super","kind","Array","isArray","every","elem","IdentityType","String","result","ObjectType","fields","join","call","field","type","name","OrType","types","some","PredicateType","predicate","Def","typeName","baseNames","ownFields","create","allSupertypes","supertypeList","allFields","fieldNames","finalized","buildable","buildParams","isSupertypeOf","that","checkAllFields","keys","child","getValue","bases","supertypeNames","length","i","forEach","baseName","indexOf","push","Field","defaultFn","hidden","JSON","stringify","obj","map","key","_fork","Type","or","from","isObject","bicfIndex","builtInCtorFns","builtInCtorTypes","def","defCache","DefImpl","hasDef","defBuiltInType","example","objStr","isString","isFunction","isRegExp","isDate","Date","isNumber","isBoolean","isNull","isUndefined","undefined","isBigInt","BigInt","builtInTypes","string","function","array","object","RegExp","number","boolean","null","defFromValue","d","vDef","build","addParam","built","param","arg","isArgAvailable","all","message","builder","args","argc","nodePrototype","defineProperty","builders","getBuilderName","enumerable","console","error","finalize","fieldName","extend","namedTypes","populateSupertypeList","list","lastSeen","pos","apply","to","len","lastIndexOf","wrapperName","getStatementBuilderName","wrapped","expressionStatement","replace","upperCasePrefix","toLowerCase","slice","charAt","getFieldNames","getFieldValue","into","getSupertypeNames","computeSupertypeLookupTable","candidates","table","typeNames","typeNameCount","j","superTypeName","defineMethod","func","old","configurable","eachField","callback","context","someField"],"mappings":"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","file":"../types.js","sourcesContent":["define(function () {\n    'use strict';\n    const Op = Object.prototype;\n    const objToStr = Op.toString;\n    const hasOwn = Op.hasOwnProperty;\n    class BaseType {\n        assert(value, deep) {\n            if (!this.check(value, deep)) {\n                var str = shallowStringify(value);\n                throw new Error(str + ' does not match type ' + this);\n            }\n            return true;\n        }\n        arrayOf() {\n            const elemType = this;\n            return new ArrayType(elemType);\n        }\n    }\n    class ArrayType extends BaseType {\n        constructor(elemType) {\n            super();\n            this.elemType = elemType;\n            this.kind = 'ArrayType';\n        }\n        toString() {\n            return '[' + this.elemType + ']';\n        }\n        check(value, deep) {\n            return Array.isArray(value) && value.every(elem => this.elemType.check(elem, deep));\n        }\n    }\n    class IdentityType extends BaseType {\n        constructor(value) {\n            super();\n            this.value = value;\n            this.kind = 'IdentityType';\n        }\n        toString() {\n            return String(this.value);\n        }\n        check(value, deep) {\n            const result = value === this.value;\n            if (!result && typeof deep === 'function') {\n                deep(this, value);\n            }\n            return result;\n        }\n    }\n    class ObjectType extends BaseType {\n        constructor(fields) {\n            super();\n            this.fields = fields;\n            this.kind = 'ObjectType';\n        }\n        toString() {\n            return '{ ' + this.fields.join(', ') + ' }';\n        }\n        check(value, deep) {\n            return objToStr.call(value) === objToStr.call({}) && this.fields.every(field => {\n                return field.type.check(value[field.name], deep);\n            });\n        }\n    }\n    class OrType extends BaseType {\n        constructor(types) {\n            super();\n            this.types = types;\n            this.kind = 'OrType';\n        }\n        toString() {\n            return this.types.join(' | ');\n        }\n        check(value, deep) {\n            if (this.types.some(type => type.check(value, !!deep))) {\n                return true;\n            }\n            if (typeof deep === 'function') {\n                deep(this, value);\n            }\n            return false;\n        }\n    }\n    class PredicateType extends BaseType {\n        constructor(name, predicate) {\n            super();\n            this.name = name;\n            this.predicate = predicate;\n            this.kind = 'PredicateType';\n        }\n        toString() {\n            return this.name;\n        }\n        check(value, deep) {\n            const result = this.predicate(value, deep);\n            if (!result && typeof deep === 'function') {\n                deep(this, value);\n            }\n            return result;\n        }\n    }\n    class Def {\n        constructor(type, typeName) {\n            this.type = type;\n            this.typeName = typeName;\n            this.baseNames = [];\n            this.ownFields = Object.create(null);\n            this.allSupertypes = Object.create(null);\n            this.supertypeList = [];\n            this.allFields = Object.create(null);\n            this.fieldNames = [];\n            this.finalized = false;\n            this.buildable = false;\n            this.buildParams = [];\n        }\n        isSupertypeOf(that) {\n            if (that instanceof Def) {\n                if (this.finalized !== true || that.finalized !== true) {\n                    throw new Error('');\n                }\n                return hasOwn.call(that.allSupertypes, this.typeName);\n            } else {\n                throw new Error(that + ' is not a Def');\n            }\n        }\n        checkAllFields(value, deep) {\n            var allFields = this.allFields;\n            if (this.finalized !== true) {\n                throw new Error('' + this.typeName);\n            }\n            function checkFieldByName(name) {\n                var field = allFields[name];\n                var type = field.type;\n                var child = field.getValue(value);\n                return type.check(child, deep);\n            }\n            return value !== null && typeof value === 'object' && Object.keys(allFields).every(checkFieldByName);\n        }\n        bases(...supertypeNames) {\n            var bases = this.baseNames;\n            if (this.finalized) {\n                if (supertypeNames.length !== bases.length) {\n                    throw new Error('');\n                }\n                for (var i = 0; i < supertypeNames.length; i++) {\n                    if (supertypeNames[i] !== bases[i]) {\n                        throw new Error('');\n                    }\n                }\n                return this;\n            }\n            supertypeNames.forEach(baseName => {\n                if (bases.indexOf(baseName) < 0) {\n                    bases.push(baseName);\n                }\n            });\n            return this;\n        }\n    }\n    class Field {\n        constructor(name, type, defaultFn, hidden) {\n            this.name = name;\n            this.type = type;\n            this.defaultFn = defaultFn;\n            this.hidden = !!hidden;\n        }\n        toString() {\n            return JSON.stringify(this.name) + ': ' + this.type;\n        }\n        getValue(obj) {\n            var value = obj[this.name];\n            if (typeof value !== 'undefined') {\n                return value;\n            }\n            if (typeof this.defaultFn === 'function') {\n                value = this.defaultFn.call(obj);\n            }\n            return value;\n        }\n    }\n    function shallowStringify(value) {\n        if (Array.isArray(value)) {\n            return '[' + value.map(shallowStringify).join(', ') + ']';\n        }\n        if (value && typeof value === 'object') {\n            return '{ ' + Object.keys(value).map(function (key) {\n                return key + ': ' + value[key];\n            }).join(', ') + ' }';\n        }\n        return JSON.stringify(value);\n    }\n    \n    function typesPlugin(_fork) {\n        const Type = {\n            or(...types) {\n                return new OrType(types.map(type => Type.from(type)));\n            },\n            from(value, name) {\n                if (value instanceof ArrayType || value instanceof IdentityType || value instanceof ObjectType || value instanceof OrType || value instanceof PredicateType) {\n                    return value;\n                }\n                if (value instanceof Def) {\n                    return value.type;\n                }\n                if (isArray.check(value)) {\n                    if (value.length !== 1) {\n                        throw new Error('only one element type is permitted for typed arrays');\n                    }\n                    return new ArrayType(Type.from(value[0]));\n                }\n                if (isObject.check(value)) {\n                    return new ObjectType(Object.keys(value).map(name => {\n                        return new Field(name, Type.from(value[name], name));\n                    }));\n                }\n                if (typeof value === 'function') {\n                    var bicfIndex = builtInCtorFns.indexOf(value);\n                    if (bicfIndex >= 0) {\n                        return builtInCtorTypes[bicfIndex];\n                    }\n                    if (typeof name !== 'string') {\n                        throw new Error('missing name');\n                    }\n                    return new PredicateType(name, value);\n                }\n                return new IdentityType(value);\n            },\n            def(typeName) {\n                return hasOwn.call(defCache, typeName) ? defCache[typeName] : defCache[typeName] = new DefImpl(typeName);\n            },\n            hasDef(typeName) {\n                return hasOwn.call(defCache, typeName);\n            }\n        };\n        var builtInCtorFns = [];\n        var builtInCtorTypes = [];\n        function defBuiltInType(name, example) {\n            const objStr = objToStr.call(example);\n            const type = new PredicateType(name, value => objToStr.call(value) === objStr);\n            if (example && typeof example.constructor === 'function') {\n                builtInCtorFns.push(example.constructor);\n                builtInCtorTypes.push(type);\n            }\n            return type;\n        }\n        const isString = defBuiltInType('string', 'truthy');\n        const isFunction = defBuiltInType('function', function () {\n        });\n        const isArray = defBuiltInType('array', []);\n        const isObject = defBuiltInType('object', {});\n        const isRegExp = defBuiltInType('RegExp', /./);\n        const isDate = defBuiltInType('Date', new Date());\n        const isNumber = defBuiltInType('number', 3);\n        const isBoolean = defBuiltInType('boolean', true);\n        const isNull = defBuiltInType('null', null);\n        const isUndefined = defBuiltInType('undefined', undefined);\n        const isBigInt = typeof BigInt === 'function' ? defBuiltInType('BigInt', BigInt(1234)) : new PredicateType('BigInt', () => false);\n        const builtInTypes = {\n            string: isString,\n            function: isFunction,\n            array: isArray,\n            object: isObject,\n            RegExp: isRegExp,\n            Date: isDate,\n            number: isNumber,\n            boolean: isBoolean,\n            null: isNull,\n            undefined: isUndefined,\n            BigInt: isBigInt\n        };\n        var defCache = Object.create(null);\n        function defFromValue(value) {\n            if (value && typeof value === 'object') {\n                var type = value.type;\n                if (typeof type === 'string' && hasOwn.call(defCache, type)) {\n                    var d = defCache[type];\n                    if (d.finalized) {\n                        return d;\n                    }\n                }\n            }\n            return null;\n        }\n        class DefImpl extends Def {\n            constructor(typeName) {\n                super(new PredicateType(typeName, (value, deep) => this.check(value, deep)), typeName);\n            }\n            check(value, deep) {\n                if (this.finalized !== true) {\n                    throw new Error('prematurely checking unfinalized type ' + this.typeName);\n                }\n                if (value === null || typeof value !== 'object') {\n                    return false;\n                }\n                var vDef = defFromValue(value);\n                if (!vDef) {\n                    if (this.typeName === 'SourceLocation' || this.typeName === 'Position') {\n                        return this.checkAllFields(value, deep);\n                    }\n                    return false;\n                }\n                if (deep && vDef === this) {\n                    return this.checkAllFields(value, deep);\n                }\n                if (!this.isSupertypeOf(vDef)) {\n                    return false;\n                }\n                if (!deep) {\n                    return true;\n                }\n                return vDef.checkAllFields(value, deep) && this.checkAllFields(value, false);\n            }\n            build(...buildParams) {\n                this.buildParams = buildParams;\n                if (this.buildable) {\n                    return this;\n                }\n                this.field('type', String, () => this.typeName);\n                this.buildable = true;\n                const addParam = (built, param, arg, isArgAvailable) => {\n                    if (hasOwn.call(built, param))\n                        return;\n                    var all = this.allFields;\n                    if (!hasOwn.call(all, param)) {\n                        throw new Error('' + param);\n                    }\n                    var field = all[param];\n                    var type = field.type;\n                    var value;\n                    if (isArgAvailable) {\n                        value = arg;\n                    } else if (field.defaultFn) {\n                        value = field.defaultFn.call(built);\n                    } else {\n                        var message = 'no value or default function given for field ' + JSON.stringify(param) + ' of ' + this.typeName + '(' + this.buildParams.map(function (name) {\n                            return all[name];\n                        }).join(', ') + ')';\n                        throw new Error(message);\n                    }\n                    if (!type.check(value)) {\n                        throw new Error(shallowStringify(value) + ' does not match field ' + field + ' of type ' + this.typeName);\n                    }\n                    built[param] = value;\n                };\n                const builder = (...args) => {\n                    var argc = args.length;\n                    if (!this.finalized) {\n                        throw new Error('attempting to instantiate unfinalized type ' + this.typeName);\n                    }\n                    var built = Object.create(nodePrototype);\n                    this.buildParams.forEach(function (param, i) {\n                        if (i < argc) {\n                            addParam(built, param, args[i], true);\n                        } else {\n                            addParam(built, param, null, false);\n                        }\n                    });\n                    Object.keys(this.allFields).forEach(function (param) {\n                        addParam(built, param, null, false);\n                    });\n                    if (built.type !== this.typeName) {\n                        throw new Error('');\n                    }\n                    return built;\n                };\n                builder.from = obj => {\n                    if (!this.finalized) {\n                        throw new Error('attempting to instantiate unfinalized type ' + this.typeName);\n                    }\n                    var built = Object.create(nodePrototype);\n                    Object.keys(this.allFields).forEach(function (param) {\n                        if (hasOwn.call(obj, param)) {\n                            addParam(built, param, obj[param], true);\n                        } else {\n                            addParam(built, param, null, false);\n                        }\n                    });\n                    if (built.type !== this.typeName) {\n                        throw new Error('');\n                    }\n                    return built;\n                };\n                Object.defineProperty(builders, getBuilderName(this.typeName), {\n                    enumerable: true,\n                    value: builder\n                });\n                return this;\n            }\n            field(name, type, defaultFn, hidden) {\n                if (this.finalized) {\n                    console.error('Ignoring attempt to redefine field ' + JSON.stringify(name) + ' of finalized type ' + JSON.stringify(this.typeName));\n                    return this;\n                }\n                this.ownFields[name] = new Field(name, Type.from(type), defaultFn, hidden);\n                return this;\n            }\n            finalize() {\n                if (!this.finalized) {\n                    var allFields = this.allFields;\n                    var allSupertypes = this.allSupertypes;\n                    this.baseNames.forEach(name => {\n                        var def = defCache[name];\n                        if (def instanceof Def) {\n                            def.finalize();\n                            extend(allFields, def.allFields);\n                            extend(allSupertypes, def.allSupertypes);\n                        } else {\n                            var message = 'unknown supertype name ' + JSON.stringify(name) + ' for subtype ' + JSON.stringify(this.typeName);\n                            throw new Error(message);\n                        }\n                    });\n                    extend(allFields, this.ownFields);\n                    allSupertypes[this.typeName] = this;\n                    this.fieldNames.length = 0;\n                    for (var fieldName in allFields) {\n                        if (hasOwn.call(allFields, fieldName) && !allFields[fieldName].hidden) {\n                            this.fieldNames.push(fieldName);\n                        }\n                    }\n                    Object.defineProperty(namedTypes, this.typeName, {\n                        enumerable: true,\n                        value: this.type\n                    });\n                    this.finalized = true;\n                    populateSupertypeList(this.typeName, this.supertypeList);\n                    if (this.buildable && this.supertypeList.lastIndexOf('Expression') >= 0) {\n                        wrapExpressionBuilderWithStatement(this.typeName);\n                    }\n                }\n            }\n        }\n        function getSupertypeNames(typeName) {\n            if (!hasOwn.call(defCache, typeName)) {\n                throw new Error('');\n            }\n            var d = defCache[typeName];\n            if (d.finalized !== true) {\n                throw new Error('');\n            }\n            return d.supertypeList.slice(1);\n        }\n        function computeSupertypeLookupTable(candidates) {\n            var table = {};\n            var typeNames = Object.keys(defCache);\n            var typeNameCount = typeNames.length;\n            for (var i = 0; i < typeNameCount; ++i) {\n                var typeName = typeNames[i];\n                var d = defCache[typeName];\n                if (d.finalized !== true) {\n                    throw new Error('' + typeName);\n                }\n                for (var j = 0; j < d.supertypeList.length; ++j) {\n                    var superTypeName = d.supertypeList[j];\n                    if (hasOwn.call(candidates, superTypeName)) {\n                        table[typeName] = superTypeName;\n                        break;\n                    }\n                }\n            }\n            return table;\n        }\n        var builders = Object.create(null);\n        var nodePrototype = {};\n        function defineMethod(name, func) {\n            var old = nodePrototype[name];\n            if (isUndefined.check(func)) {\n                delete nodePrototype[name];\n            } else {\n                isFunction.assert(func);\n                Object.defineProperty(nodePrototype, name, {\n                    enumerable: true,\n                    configurable: true,\n                    value: func\n                });\n            }\n            return old;\n        }\n        function getBuilderName(typeName) {\n            return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {\n                var len = upperCasePrefix.length;\n                switch (len) {\n                case 0:\n                    return '';\n                case 1:\n                    return upperCasePrefix.toLowerCase();\n                default:\n                    return upperCasePrefix.slice(0, len - 1).toLowerCase() + upperCasePrefix.charAt(len - 1);\n                }\n            });\n        }\n        function getStatementBuilderName(typeName) {\n            typeName = getBuilderName(typeName);\n            return typeName.replace(/(Expression)?$/, 'Statement');\n        }\n        var namedTypes = {};\n        function getFieldNames(object) {\n            var d = defFromValue(object);\n            if (d) {\n                return d.fieldNames.slice(0);\n            }\n            if ('type' in object) {\n                throw new Error('did not recognize object of type ' + JSON.stringify(object.type));\n            }\n            return Object.keys(object);\n        }\n        function getFieldValue(object, fieldName) {\n            var d = defFromValue(object);\n            if (d) {\n                var field = d.allFields[fieldName];\n                if (field) {\n                    return field.getValue(object);\n                }\n            }\n            return object && object[fieldName];\n        }\n        function eachField(object, callback, context) {\n            getFieldNames(object).forEach(function (name) {\n                callback.call(this, name, getFieldValue(object, name));\n            }, context);\n        }\n        function someField(object, callback, context) {\n            return getFieldNames(object).some(function (name) {\n                return callback.call(this, name, getFieldValue(object, name));\n            }, context);\n        }\n        function wrapExpressionBuilderWithStatement(typeName) {\n            var wrapperName = getStatementBuilderName(typeName);\n            if (builders[wrapperName])\n                return;\n            var wrapped = builders[getBuilderName(typeName)];\n            if (!wrapped)\n                return;\n            const builder = function (...args) {\n                return builders.expressionStatement(wrapped.apply(builders, args));\n            };\n            builder.from = function (...args) {\n                return builders.expressionStatement(wrapped.from.apply(builders, args));\n            };\n            builders[wrapperName] = builder;\n        }\n        function populateSupertypeList(typeName, list) {\n            list.length = 0;\n            list.push(typeName);\n            var lastSeen = Object.create(null);\n            for (var pos = 0; pos < list.length; ++pos) {\n                typeName = list[pos];\n                var d = defCache[typeName];\n                if (d.finalized !== true) {\n                    throw new Error('');\n                }\n                if (hasOwn.call(lastSeen, typeName)) {\n                    delete list[lastSeen[typeName]];\n                }\n                lastSeen[typeName] = pos;\n                list.push.apply(list, d.baseNames);\n            }\n            for (var to = 0, from = to, len = list.length; from < len; ++from) {\n                if (hasOwn.call(list, from)) {\n                    list[to++] = list[from];\n                }\n            }\n            list.length = to;\n        }\n        function extend(into, from) {\n            Object.keys(from).forEach(function (name) {\n                into[name] = from[name];\n            });\n            return into;\n        }\n        function finalize() {\n            Object.keys(defCache).forEach(function (name) {\n                defCache[name].finalize();\n            });\n        }\n        return {\n            Type,\n            builtInTypes,\n            getSupertypeNames,\n            computeSupertypeLookupTable,\n            builders,\n            defineMethod,\n            getBuilderName,\n            getStatementBuilderName,\n            namedTypes,\n            getFieldNames,\n            getFieldValue,\n            eachField,\n            someField,\n            finalize,\n        };\n    };\n    \n    return typesPlugin;\n});"]}