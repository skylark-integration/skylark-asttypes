{"version":3,"sources":["fork.js"],"names":["define","typesPlugin","pathVisitorPlugin","equivPlugin","pathPlugin","nodePathPlugin","plugins","fork","used","usedResult","use","plugin","idx","indexOf","length","push","createFork","types","forEach","finalize","PathVisitor","Type","builtInTypes","namedTypes","builders","defineMethod","getFieldNames","getFieldValue","eachField","someField","getSupertypeNames","getBuilderName","astNodesAreEquivalent","Path","NodePath","visit"],"mappings":";;;;;;;AAAAA,QACI,UACA,iBACA,UACA,SACA,eACD,SAAUC,EAAaC,EAAmBC,EAAaC,EAAYC,GAClE,aAgBA,OAAO,SAAUC,GACb,MAAMC,EAhBV,WACI,MAAMC,KACAC,KAUN,IAAIF,GAASG,IATb,SAAaC,GACT,IAAIC,EAAMJ,EAAKK,QAAQF,GAMvB,OALa,IAATC,IACAA,EAAMJ,EAAKM,OACXN,EAAKO,KAAKJ,GACVF,EAAWG,GAAOD,EAAOJ,IAEtBE,EAAWG,KAGtB,OAAOL,EAGMS,GACPC,EAAQV,EAAKG,IAAIT,GACvBK,EAAQY,QAAQX,EAAKG,KACrBO,EAAME,WACN,MAAMC,EAAcb,EAAKG,IAAIR,GAC7B,OACImB,KAAMJ,EAAMI,KACZC,aAAcL,EAAMK,aACpBC,WAAYN,EAAMM,WAClBC,SAAUP,EAAMO,SAChBC,aAAcR,EAAMQ,aACpBC,cAAeT,EAAMS,cACrBC,cAAeV,EAAMU,cACrBC,UAAWX,EAAMW,UACjBC,UAAWZ,EAAMY,UACjBC,kBAAmBb,EAAMa,kBACzBC,eAAgBd,EAAMc,eACtBC,sBAAuBzB,EAAKG,IAAIP,GAChCgB,SAAUF,EAAME,SAChBc,KAAM1B,EAAKG,IAAIN,GACf8B,SAAU3B,EAAKG,IAAIL,GACnBe,YAAAA,EACAV,IAAKH,EAAKG,IACVyB,MAAOf,EAAYe","file":"../fork.js","sourcesContent":["define([\n    './types',\n    './path-visitor',\n    './equiv',\n    './path',\n    './node-path'\n], function (typesPlugin, pathVisitorPlugin, equivPlugin, pathPlugin, nodePathPlugin) {\n    'use strict';\n    function createFork() {\n        const used = [];\n        const usedResult = [];\n        function use(plugin) {\n            var idx = used.indexOf(plugin);\n            if (idx === -1) {\n                idx = used.length;\n                used.push(plugin);\n                usedResult[idx] = plugin(fork);\n            }\n            return usedResult[idx];\n        }\n        var fork = { use };\n        return fork;\n    }\n    return function (plugins) {\n        const fork = createFork();\n        const types = fork.use(typesPlugin);\n        plugins.forEach(fork.use);\n        types.finalize();\n        const PathVisitor = fork.use(pathVisitorPlugin);\n        return {\n            Type: types.Type,\n            builtInTypes: types.builtInTypes,\n            namedTypes: types.namedTypes,\n            builders: types.builders,\n            defineMethod: types.defineMethod,\n            getFieldNames: types.getFieldNames,\n            getFieldValue: types.getFieldValue,\n            eachField: types.eachField,\n            someField: types.someField,\n            getSupertypeNames: types.getSupertypeNames,\n            getBuilderName: types.getBuilderName,\n            astNodesAreEquivalent: fork.use(equivPlugin),\n            finalize: types.finalize,\n            Path: fork.use(pathPlugin),\n            NodePath: fork.use(nodePathPlugin),\n            PathVisitor,\n            use: fork.use,\n            visit: PathVisitor.visit\n        };\n    };\n    ;\n\n});"]}