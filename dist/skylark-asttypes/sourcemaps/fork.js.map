{"version":3,"sources":["fork.js"],"names":["define","typesPlugin","pathVisitorPlugin","equivPlugin","pathPlugin","nodePathPlugin","createFork","used","usedResult","fork","use","plugin","idx","indexOf","length","push","plugins","types","PathVisitor","forEach","finalize","Type","builtInTypes","namedTypes","builders","defineMethod","getFieldNames","getFieldValue","eachField","someField","getSupertypeNames","getBuilderName","astNodesAreEquivalent","Path","NodePath","visit"],"mappings":";;;;;;;AAAAA,OAAO,CACH,UACA,iBACA,UACA,SACA,eACD,SAAUC,EAAaC,EAAmBC,EAAaC,EAAYC,GAClE,aACA,SAASC,IACL,MAAMC,EAAO,GACPC,EAAa,GAUnB,IAAIC,EAAO,CAAEC,IATb,SAAaC,GACT,IAAIC,EAAML,EAAKM,QAAQF,CAAM,EAM7B,MALY,CAAC,IAATC,IACAA,EAAML,EAAKO,OACXP,EAAKQ,KAAKJ,CAAM,EAChBH,EAAWI,GAAOD,EAAOF,CAAI,GAE1BD,EAAWI,EACtB,CACiB,EACjB,OAAOH,CACX,CACA,OAAO,SAAUO,GACb,IAAMP,EAAOH,EAAW,EAClBW,EAAQR,EAAKC,IAAIT,CAAW,EAG5BiB,GAFNF,EAAQG,QAAQV,EAAKC,GAAG,EACxBO,EAAMG,SAAS,EACKX,EAAKC,IAAIR,CAAiB,GAC9C,MAAO,CACHmB,KAAMJ,EAAMI,KACZC,aAAcL,EAAMK,aACpBC,WAAYN,EAAMM,WAClBC,SAAUP,EAAMO,SAChBC,aAAcR,EAAMQ,aACpBC,cAAeT,EAAMS,cACrBC,cAAeV,EAAMU,cACrBC,UAAWX,EAAMW,UACjBC,UAAWZ,EAAMY,UACjBC,kBAAmBb,EAAMa,kBACzBC,eAAgBd,EAAMc,eACtBC,sBAAuBvB,EAAKC,IAAIP,CAAW,EAC3CiB,SAAUH,EAAMG,SAChBa,KAAMxB,EAAKC,IAAIN,CAAU,EACzB8B,SAAUzB,EAAKC,IAAIL,CAAc,EACjCa,YAAAA,EACAR,IAAKD,EAAKC,IACVyB,MAAOjB,EAAYiB,KACvB,CACJ,CAGJ,CAAC","file":"../fork.js","sourcesContent":["define([\n    './types',\n    './path-visitor',\n    './equiv',\n    './path',\n    './node-path'\n], function (typesPlugin, pathVisitorPlugin, equivPlugin, pathPlugin, nodePathPlugin) {\n    'use strict';\n    function createFork() {\n        const used = [];\n        const usedResult = [];\n        function use(plugin) {\n            var idx = used.indexOf(plugin);\n            if (idx === -1) {\n                idx = used.length;\n                used.push(plugin);\n                usedResult[idx] = plugin(fork);\n            }\n            return usedResult[idx];\n        }\n        var fork = { use };\n        return fork;\n    }\n    return function (plugins) {\n        const fork = createFork();\n        const types = fork.use(typesPlugin);\n        plugins.forEach(fork.use);\n        types.finalize();\n        const PathVisitor = fork.use(pathVisitorPlugin);\n        return {\n            Type: types.Type,\n            builtInTypes: types.builtInTypes,\n            namedTypes: types.namedTypes,\n            builders: types.builders,\n            defineMethod: types.defineMethod,\n            getFieldNames: types.getFieldNames,\n            getFieldValue: types.getFieldValue,\n            eachField: types.eachField,\n            someField: types.someField,\n            getSupertypeNames: types.getSupertypeNames,\n            getBuilderName: types.getBuilderName,\n            astNodesAreEquivalent: fork.use(equivPlugin),\n            finalize: types.finalize,\n            Path: fork.use(pathPlugin),\n            NodePath: fork.use(nodePathPlugin),\n            PathVisitor,\n            use: fork.use,\n            visit: PathVisitor.visit\n        };\n    };\n    ;\n\n});"]}