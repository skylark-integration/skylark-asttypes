{"version":3,"sources":["shared.js"],"names":["define","typesPlugin","fork","types","use","Type","builtin","builtInTypes","isNumber","number","naiveIsPrimitive","or","string","boolean","null","undefined","geq","than","from","value","check","defaults","emptyArray","false","true","use strict","isPrimitive","type","toString"],"mappings":";;;;;;;AAAAA,OAAO,CAAC,WAAY,SAAUC,GAC1B,aACA,OAAO,SAAUC,GACb,IAAIC,EAAQD,EAAKE,IAAIH,CAAW,EAC5BI,EAAOF,EAAME,KACbC,EAAUH,EAAMI,aAChBC,EAAWF,EAAQG,OAwBnBC,EAAmBL,EAAKM,GAAGL,EAAQM,OAAQN,EAAQG,OAAQH,EAAQO,QAASP,EAAQQ,KAAMR,EAAQS,SAAS,EAU/G,MAAO,CACHC,IAlCJ,SAAaC,GACT,OAAOZ,EAAKa,KAAKC,GAASX,EAASY,MAAMD,CAAK,GAAcF,GAATE,EAAeX,EAAW,OAASS,CAAI,CAC9F,EAiCII,SA/Ba,CACbP,KAAQ,WACJ,OAAO,IACX,EACAQ,WAAc,WACV,MAAO,EACX,EACAC,MAAS,WACL,MAAO,CAAA,CACX,EACAC,KAAQ,WACJ,MAAO,CAAA,CACX,EACAT,UAAa,aAEbU,aAAc,WACV,MAAO,YACX,CACJ,EAcIC,YAZgBrB,EAAKa,KAAKC,IAC1B,OAAc,OAAVA,GAGS,WADTQ,EAAO,OAAOR,IACgB,YAATQ,CAI7B,EAAGjB,EAAiBkB,SAAS,CAAC,CAK9B,CACJ,CAEJ,CAAC","file":"../shared.js","sourcesContent":["define(['./types'], function (typesPlugin) {\n    'use strict';\n    return function (fork) {\n        var types = fork.use(typesPlugin);\n        var Type = types.Type;\n        var builtin = types.builtInTypes;\n        var isNumber = builtin.number;\n        function geq(than) {\n            return Type.from(value => isNumber.check(value) && value >= than, isNumber + ' >= ' + than);\n        }\n        ;\n        const defaults = {\n            'null': function () {\n                return null;\n            },\n            'emptyArray': function () {\n                return [];\n            },\n            'false': function () {\n                return false;\n            },\n            'true': function () {\n                return true;\n            },\n            'undefined': function () {\n            },\n            'use strict': function () {\n                return 'use strict';\n            }\n        };\n        var naiveIsPrimitive = Type.or(builtin.string, builtin.number, builtin.boolean, builtin.null, builtin.undefined);\n        const isPrimitive = Type.from(value => {\n            if (value === null)\n                return true;\n            var type = typeof value;\n            if (type === 'object' || type === 'function') {\n                return false;\n            }\n            return true;\n        }, naiveIsPrimitive.toString());\n        return {\n            geq,\n            defaults,\n            isPrimitive\n        };\n    };\n\n});"]}