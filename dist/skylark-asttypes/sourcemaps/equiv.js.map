{"version":3,"sources":["equiv.js"],"names":["define","typesPlugin","fork","types","use","getFieldNames","getFieldValue","isArray","builtInTypes","array","isObject","object","isDate","Date","isRegExp","RegExp","hasOwn","Object","prototype","hasOwnProperty","astNodesAreEquivalent","a","b","problemPath","check","length","areEquivalent","subscriptForProperty","property","test","JSON","stringify","assert","aLength","push","i","problemPathTail","pop","Error","arraysAreEquivalent","type","aNames","aNameCount","bNames","bNameCount","name","aChild","bChild","seenNames","create","call","objectsAreEquivalent","source","global","multiline","ignoreCase","map","join"],"mappings":"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","file":"../equiv.js","sourcesContent":["define(['./types'], function (typesPlugin) {\n    'use strict';\n    return function (fork) {\n        var types = fork.use(typesPlugin);\n        var getFieldNames = types.getFieldNames;\n        var getFieldValue = types.getFieldValue;\n        var isArray = types.builtInTypes.array;\n        var isObject = types.builtInTypes.object;\n        var isDate = types.builtInTypes.Date;\n        var isRegExp = types.builtInTypes.RegExp;\n        var hasOwn = Object.prototype.hasOwnProperty;\n        function astNodesAreEquivalent(a, b, problemPath) {\n            if (isArray.check(problemPath)) {\n                problemPath.length = 0;\n            } else {\n                problemPath = null;\n            }\n            return areEquivalent(a, b, problemPath);\n        }\n        astNodesAreEquivalent.assert = function (a, b) {\n            var problemPath = [];\n            if (!astNodesAreEquivalent(a, b, problemPath)) {\n                if (problemPath.length === 0) {\n                    if (a !== b) {\n                        throw new Error('Nodes must be equal');\n                    }\n                } else {\n                    throw new Error('Nodes differ in the following path: ' + problemPath.map(subscriptForProperty).join(''));\n                }\n            }\n        };\n        function subscriptForProperty(property) {\n            if (/[_$a-z][_$a-z0-9]*/i.test(property)) {\n                return '.' + property;\n            }\n            return '[' + JSON.stringify(property) + ']';\n        }\n        function areEquivalent(a, b, problemPath) {\n            if (a === b) {\n                return true;\n            }\n            if (isArray.check(a)) {\n                return arraysAreEquivalent(a, b, problemPath);\n            }\n            if (isObject.check(a)) {\n                return objectsAreEquivalent(a, b, problemPath);\n            }\n            if (isDate.check(a)) {\n                return isDate.check(b) && +a === +b;\n            }\n            if (isRegExp.check(a)) {\n                return isRegExp.check(b) && (a.source === b.source && a.global === b.global && a.multiline === b.multiline && a.ignoreCase === b.ignoreCase);\n            }\n            return a == b;\n        }\n        function arraysAreEquivalent(a, b, problemPath) {\n            isArray.assert(a);\n            var aLength = a.length;\n            if (!isArray.check(b) || b.length !== aLength) {\n                if (problemPath) {\n                    problemPath.push('length');\n                }\n                return false;\n            }\n            for (var i = 0; i < aLength; ++i) {\n                if (problemPath) {\n                    problemPath.push(i);\n                }\n                if (i in a !== i in b) {\n                    return false;\n                }\n                if (!areEquivalent(a[i], b[i], problemPath)) {\n                    return false;\n                }\n                if (problemPath) {\n                    var problemPathTail = problemPath.pop();\n                    if (problemPathTail !== i) {\n                        throw new Error('' + problemPathTail);\n                    }\n                }\n            }\n            return true;\n        }\n        function objectsAreEquivalent(a, b, problemPath) {\n            isObject.assert(a);\n            if (!isObject.check(b)) {\n                return false;\n            }\n            if (a.type !== b.type) {\n                if (problemPath) {\n                    problemPath.push('type');\n                }\n                return false;\n            }\n            var aNames = getFieldNames(a);\n            var aNameCount = aNames.length;\n            var bNames = getFieldNames(b);\n            var bNameCount = bNames.length;\n            if (aNameCount === bNameCount) {\n                for (var i = 0; i < aNameCount; ++i) {\n                    var name = aNames[i];\n                    var aChild = getFieldValue(a, name);\n                    var bChild = getFieldValue(b, name);\n                    if (problemPath) {\n                        problemPath.push(name);\n                    }\n                    if (!areEquivalent(aChild, bChild, problemPath)) {\n                        return false;\n                    }\n                    if (problemPath) {\n                        var problemPathTail = problemPath.pop();\n                        if (problemPathTail !== name) {\n                            throw new Error('' + problemPathTail);\n                        }\n                    }\n                }\n                return true;\n            }\n            if (!problemPath) {\n                return false;\n            }\n            var seenNames = Object.create(null);\n            for (i = 0; i < aNameCount; ++i) {\n                seenNames[aNames[i]] = true;\n            }\n            for (i = 0; i < bNameCount; ++i) {\n                name = bNames[i];\n                if (!hasOwn.call(seenNames, name)) {\n                    problemPath.push(name);\n                    return false;\n                }\n                delete seenNames[name];\n            }\n            for (name in seenNames) {\n                problemPath.push(name);\n                break;\n            }\n            return false;\n        }\n        return astNodesAreEquivalent;\n    };\n});"]}