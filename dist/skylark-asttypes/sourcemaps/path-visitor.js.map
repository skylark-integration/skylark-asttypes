{"version":3,"sources":["path-visitor.js"],"names":["define","typesPlugin","nodePathPlugin","hasOwn","Object","prototype","hasOwnProperty","fork","types","use","NodePath","isArray","builtInTypes","array","isObject","object","isFunction","function","PathVisitor","this","Error","_reusableContextStack","_methodNameTable","visitor","typeNames","create","methodName","test","slice","length","supertypeTable","computeSupertypeLookupTable","methodNameTable","typeNameKeys","keys","typeNameCount","i","typeName","check","computeMethodNameTable","_shouldVisitComments","call","Context","makeContextConstructor","_visiting","_changeReported","extend","target","source","property","fromMethodsObject","methods","Visitor","Vp","PVp","constructor","assert","visit","node","visitChildren","path","value","each","visitWithoutReset","childNames","getFieldNames","comments","indexOf","push","childCount","childPaths","childName","getFieldValue","get","defineProperty","writable","enumerable","configurable","currentPath","needToCallTraverse","seal","Cp","sharedContextProtoMethods","_abortRequested","didNotThrow","argc","arguments","args","Array","root","reset","apply","AbortRequest","abort","request","cancel","_path","type","context","acquireContext","invokeVisitorMethod","releaseContext","pop","reportChanged","wasChangeReported","result","undefined","replace","traverse","newVisitor"],"mappings":"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","file":"../path-visitor.js","sourcesContent":["define([\n    './types',\n    './node-path'\n], function (typesPlugin, nodePathPlugin) {\n    'use strict';\n    var hasOwn = Object.prototype.hasOwnProperty;\n    return function pathVisitorPlugin(fork) {\n        var types = fork.use(typesPlugin);\n        var NodePath = fork.use(nodePathPlugin);\n        var isArray = types.builtInTypes.array;\n        var isObject = types.builtInTypes.object;\n        var isFunction = types.builtInTypes.function;\n        var undefined;\n        const PathVisitor = function PathVisitor() {\n            if (!(this instanceof PathVisitor)) {\n                throw new Error(\"PathVisitor constructor cannot be invoked without 'new'\");\n            }\n            this._reusableContextStack = [];\n            this._methodNameTable = computeMethodNameTable(this);\n            this._shouldVisitComments = hasOwn.call(this._methodNameTable, 'Block') || hasOwn.call(this._methodNameTable, 'Line');\n            this.Context = makeContextConstructor(this);\n            this._visiting = false;\n            this._changeReported = false;\n        };\n        function computeMethodNameTable(visitor) {\n            var typeNames = Object.create(null);\n            for (var methodName in visitor) {\n                if (/^visit[A-Z]/.test(methodName)) {\n                    typeNames[methodName.slice('visit'.length)] = true;\n                }\n            }\n            var supertypeTable = types.computeSupertypeLookupTable(typeNames);\n            var methodNameTable = Object.create(null);\n            var typeNameKeys = Object.keys(supertypeTable);\n            var typeNameCount = typeNameKeys.length;\n            for (var i = 0; i < typeNameCount; ++i) {\n                var typeName = typeNameKeys[i];\n                methodName = 'visit' + supertypeTable[typeName];\n                if (isFunction.check(visitor[methodName])) {\n                    methodNameTable[typeName] = methodName;\n                }\n            }\n            return methodNameTable;\n        }\n        PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {\n            if (methods instanceof PathVisitor) {\n                return methods;\n            }\n            if (!isObject.check(methods)) {\n                return new PathVisitor();\n            }\n            const Visitor = function Visitor() {\n                if (!(this instanceof Visitor)) {\n                    throw new Error(\"Visitor constructor cannot be invoked without 'new'\");\n                }\n                PathVisitor.call(this);\n            };\n            var Vp = Visitor.prototype = Object.create(PVp);\n            Vp.constructor = Visitor;\n            extend(Vp, methods);\n            extend(Visitor, PathVisitor);\n            isFunction.assert(Visitor.fromMethodsObject);\n            isFunction.assert(Visitor.visit);\n            return new Visitor();\n        };\n        function extend(target, source) {\n            for (var property in source) {\n                if (hasOwn.call(source, property)) {\n                    target[property] = source[property];\n                }\n            }\n            return target;\n        }\n        PathVisitor.visit = function visit(node, methods) {\n            return PathVisitor.fromMethodsObject(methods).visit(node);\n        };\n        var PVp = PathVisitor.prototype;\n        PVp.visit = function () {\n            if (this._visiting) {\n                throw new Error('Recursively calling visitor.visit(path) resets visitor state. ' + 'Try this.visit(path) or this.traverse(path) instead.');\n            }\n            this._visiting = true;\n            this._changeReported = false;\n            this._abortRequested = false;\n            var argc = arguments.length;\n            var args = new Array(argc);\n            for (var i = 0; i < argc; ++i) {\n                args[i] = arguments[i];\n            }\n            if (!(args[0] instanceof NodePath)) {\n                args[0] = new NodePath({ root: args[0] }).get('root');\n            }\n            this.reset.apply(this, args);\n            var didNotThrow;\n            try {\n                var root = this.visitWithoutReset(args[0]);\n                didNotThrow = true;\n            } finally {\n                this._visiting = false;\n                if (!didNotThrow && this._abortRequested) {\n                    return args[0].value;\n                }\n            }\n            return root;\n        };\n        PVp.AbortRequest = function AbortRequest() {\n        };\n        PVp.abort = function () {\n            var visitor = this;\n            visitor._abortRequested = true;\n            var request = new visitor.AbortRequest();\n            request.cancel = function () {\n                visitor._abortRequested = false;\n            };\n            throw request;\n        };\n        PVp.reset = function (_path) {\n        };\n        PVp.visitWithoutReset = function (path) {\n            if (this instanceof this.Context) {\n                return this.visitor.visitWithoutReset(path);\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error('');\n            }\n            var value = path.value;\n            var methodName = value && typeof value === 'object' && typeof value.type === 'string' && this._methodNameTable[value.type];\n            if (methodName) {\n                var context = this.acquireContext(path);\n                try {\n                    return context.invokeVisitorMethod(methodName);\n                } finally {\n                    this.releaseContext(context);\n                }\n            } else {\n                return visitChildren(path, this);\n            }\n        };\n        function visitChildren(path, visitor) {\n            if (!(path instanceof NodePath)) {\n                throw new Error('');\n            }\n            if (!(visitor instanceof PathVisitor)) {\n                throw new Error('');\n            }\n            var value = path.value;\n            if (isArray.check(value)) {\n                path.each(visitor.visitWithoutReset, visitor);\n            } else if (!isObject.check(value)) {\n            } else {\n                var childNames = types.getFieldNames(value);\n                if (visitor._shouldVisitComments && value.comments && childNames.indexOf('comments') < 0) {\n                    childNames.push('comments');\n                }\n                var childCount = childNames.length;\n                var childPaths = [];\n                for (var i = 0; i < childCount; ++i) {\n                    var childName = childNames[i];\n                    if (!hasOwn.call(value, childName)) {\n                        value[childName] = types.getFieldValue(value, childName);\n                    }\n                    childPaths.push(path.get(childName));\n                }\n                for (var i = 0; i < childCount; ++i) {\n                    visitor.visitWithoutReset(childPaths[i]);\n                }\n            }\n            return path.value;\n        }\n        PVp.acquireContext = function (path) {\n            if (this._reusableContextStack.length === 0) {\n                return new this.Context(path);\n            }\n            return this._reusableContextStack.pop().reset(path);\n        };\n        PVp.releaseContext = function (context) {\n            if (!(context instanceof this.Context)) {\n                throw new Error('');\n            }\n            this._reusableContextStack.push(context);\n            context.currentPath = null;\n        };\n        PVp.reportChanged = function () {\n            this._changeReported = true;\n        };\n        PVp.wasChangeReported = function () {\n            return this._changeReported;\n        };\n        function makeContextConstructor(visitor) {\n            function Context(path) {\n                if (!(this instanceof Context)) {\n                    throw new Error('');\n                }\n                if (!(this instanceof PathVisitor)) {\n                    throw new Error('');\n                }\n                if (!(path instanceof NodePath)) {\n                    throw new Error('');\n                }\n                Object.defineProperty(this, 'visitor', {\n                    value: visitor,\n                    writable: false,\n                    enumerable: true,\n                    configurable: false\n                });\n                this.currentPath = path;\n                this.needToCallTraverse = true;\n                Object.seal(this);\n            }\n            if (!(visitor instanceof PathVisitor)) {\n                throw new Error('');\n            }\n            var Cp = Context.prototype = Object.create(visitor);\n            Cp.constructor = Context;\n            extend(Cp, sharedContextProtoMethods);\n            return Context;\n        }\n        var sharedContextProtoMethods = Object.create(null);\n        sharedContextProtoMethods.reset = function reset(path) {\n            if (!(this instanceof this.Context)) {\n                throw new Error('');\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error('');\n            }\n            this.currentPath = path;\n            this.needToCallTraverse = true;\n            return this;\n        };\n        sharedContextProtoMethods.invokeVisitorMethod = function invokeVisitorMethod(methodName) {\n            if (!(this instanceof this.Context)) {\n                throw new Error('');\n            }\n            if (!(this.currentPath instanceof NodePath)) {\n                throw new Error('');\n            }\n            var result = this.visitor[methodName].call(this, this.currentPath);\n            if (result === false) {\n                this.needToCallTraverse = false;\n            } else if (result !== undefined) {\n                this.currentPath = this.currentPath.replace(result)[0];\n                if (this.needToCallTraverse) {\n                    this.traverse(this.currentPath);\n                }\n            }\n            if (this.needToCallTraverse !== false) {\n                throw new Error('Must either call this.traverse or return false in ' + methodName);\n            }\n            var path = this.currentPath;\n            return path && path.value;\n        };\n        sharedContextProtoMethods.traverse = function traverse(path, newVisitor) {\n            if (!(this instanceof this.Context)) {\n                throw new Error('');\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error('');\n            }\n            if (!(this.currentPath instanceof NodePath)) {\n                throw new Error('');\n            }\n            this.needToCallTraverse = false;\n            return visitChildren(path, PathVisitor.fromMethodsObject(newVisitor || this.visitor));\n        };\n        sharedContextProtoMethods.visit = function visit(path, newVisitor) {\n            if (!(this instanceof this.Context)) {\n                throw new Error('');\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error('');\n            }\n            if (!(this.currentPath instanceof NodePath)) {\n                throw new Error('');\n            }\n            this.needToCallTraverse = false;\n            return PathVisitor.fromMethodsObject(newVisitor || this.visitor).visitWithoutReset(path);\n        };\n        sharedContextProtoMethods.reportChanged = function reportChanged() {\n            this.visitor.reportChanged();\n        };\n        sharedContextProtoMethods.abort = function abort() {\n            this.needToCallTraverse = false;\n            this.visitor.abort();\n        };\n        return PathVisitor;\n    };\n});"]}