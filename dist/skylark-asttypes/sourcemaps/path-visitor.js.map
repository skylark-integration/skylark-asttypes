{"version":3,"sources":["path-visitor.js"],"names":["define","typesPlugin","nodePathPlugin","hasOwn","Object","prototype","hasOwnProperty","fork","types","use","NodePath","isArray","builtInTypes","array","isObject","object","isFunction","function","PathVisitor","this","Error","_reusableContextStack","_methodNameTable","visitor","methodName","typeNames","create","test","slice","length","supertypeTable","computeSupertypeLookupTable","methodNameTable","typeNameKeys","keys","typeNameCount","i","typeName","check","_shouldVisitComments","call","Context","path","defineProperty","value","writable","enumerable","configurable","currentPath","needToCallTraverse","seal","Cp","constructor","extend","sharedContextProtoMethods","_visiting","_changeReported","target","source","property","fromMethodsObject","methods","Visitor","Vp","PVp","assert","visit","node","visitChildren","each","visitWithoutReset","childNames","getFieldNames","childCount","comments","indexOf","push","childPaths","childName","getFieldValue","get","_abortRequested","argc","arguments","args","Array","root","reset","apply","didNotThrow","AbortRequest","abort","request","cancel","_path","type","context","acquireContext","invokeVisitorMethod","releaseContext","pop","reportChanged","wasChangeReported","result","undefined","replace","traverse","newVisitor"],"mappings":"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","file":"../path-visitor.js","sourcesContent":["define([\n    './types',\n    './node-path'\n], function (typesPlugin, nodePathPlugin) {\n    'use strict';\n    var hasOwn = Object.prototype.hasOwnProperty;\n    return function pathVisitorPlugin(fork) {\n        var types = fork.use(typesPlugin);\n        var NodePath = fork.use(nodePathPlugin);\n        var isArray = types.builtInTypes.array;\n        var isObject = types.builtInTypes.object;\n        var isFunction = types.builtInTypes.function;\n        var undefined;\n        const PathVisitor = function PathVisitor() {\n            if (!(this instanceof PathVisitor)) {\n                throw new Error(\"PathVisitor constructor cannot be invoked without 'new'\");\n            }\n            this._reusableContextStack = [];\n            this._methodNameTable = computeMethodNameTable(this);\n            this._shouldVisitComments = hasOwn.call(this._methodNameTable, 'Block') || hasOwn.call(this._methodNameTable, 'Line');\n            this.Context = makeContextConstructor(this);\n            this._visiting = false;\n            this._changeReported = false;\n        };\n        function computeMethodNameTable(visitor) {\n            var typeNames = Object.create(null);\n            for (var methodName in visitor) {\n                if (/^visit[A-Z]/.test(methodName)) {\n                    typeNames[methodName.slice('visit'.length)] = true;\n                }\n            }\n            var supertypeTable = types.computeSupertypeLookupTable(typeNames);\n            var methodNameTable = Object.create(null);\n            var typeNameKeys = Object.keys(supertypeTable);\n            var typeNameCount = typeNameKeys.length;\n            for (var i = 0; i < typeNameCount; ++i) {\n                var typeName = typeNameKeys[i];\n                methodName = 'visit' + supertypeTable[typeName];\n                if (isFunction.check(visitor[methodName])) {\n                    methodNameTable[typeName] = methodName;\n                }\n            }\n            return methodNameTable;\n        }\n        PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {\n            if (methods instanceof PathVisitor) {\n                return methods;\n            }\n            if (!isObject.check(methods)) {\n                return new PathVisitor();\n            }\n            const Visitor = function Visitor() {\n                if (!(this instanceof Visitor)) {\n                    throw new Error(\"Visitor constructor cannot be invoked without 'new'\");\n                }\n                PathVisitor.call(this);\n            };\n            var Vp = Visitor.prototype = Object.create(PVp);\n            Vp.constructor = Visitor;\n            extend(Vp, methods);\n            extend(Visitor, PathVisitor);\n            isFunction.assert(Visitor.fromMethodsObject);\n            isFunction.assert(Visitor.visit);\n            return new Visitor();\n        };\n        function extend(target, source) {\n            for (var property in source) {\n                if (hasOwn.call(source, property)) {\n                    target[property] = source[property];\n                }\n            }\n            return target;\n        }\n        PathVisitor.visit = function visit(node, methods) {\n            return PathVisitor.fromMethodsObject(methods).visit(node);\n        };\n        var PVp = PathVisitor.prototype;\n        PVp.visit = function () {\n            if (this._visiting) {\n                throw new Error('Recursively calling visitor.visit(path) resets visitor state. ' + 'Try this.visit(path) or this.traverse(path) instead.');\n            }\n            this._visiting = true;\n            this._changeReported = false;\n            this._abortRequested = false;\n            var argc = arguments.length;\n            var args = new Array(argc);\n            for (var i = 0; i < argc; ++i) {\n                args[i] = arguments[i];\n            }\n            if (!(args[0] instanceof NodePath)) {\n                args[0] = new NodePath({ root: args[0] }).get('root');\n            }\n            this.reset.apply(this, args);\n            var didNotThrow;\n            try {\n                var root = this.visitWithoutReset(args[0]);\n                didNotThrow = true;\n            } finally {\n                this._visiting = false;\n                if (!didNotThrow && this._abortRequested) {\n                    return args[0].value;\n                }\n            }\n            return root;\n        };\n        PVp.AbortRequest = function AbortRequest() {\n        };\n        PVp.abort = function () {\n            var visitor = this;\n            visitor._abortRequested = true;\n            var request = new visitor.AbortRequest();\n            request.cancel = function () {\n                visitor._abortRequested = false;\n            };\n            throw request;\n        };\n        PVp.reset = function (_path) {\n        };\n        PVp.visitWithoutReset = function (path) {\n            if (this instanceof this.Context) {\n                return this.visitor.visitWithoutReset(path);\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error('');\n            }\n            var value = path.value;\n            var methodName = value && typeof value === 'object' && typeof value.type === 'string' && this._methodNameTable[value.type];\n            if (methodName) {\n                var context = this.acquireContext(path);\n                try {\n                    return context.invokeVisitorMethod(methodName);\n                } finally {\n                    this.releaseContext(context);\n                }\n            } else {\n                return visitChildren(path, this);\n            }\n        };\n        function visitChildren(path, visitor) {\n            if (!(path instanceof NodePath)) {\n                throw new Error('');\n            }\n            if (!(visitor instanceof PathVisitor)) {\n                throw new Error('');\n            }\n            var value = path.value;\n            if (isArray.check(value)) {\n                path.each(visitor.visitWithoutReset, visitor);\n            } else if (!isObject.check(value)) {\n            } else {\n                var childNames = types.getFieldNames(value);\n                if (visitor._shouldVisitComments && value.comments && childNames.indexOf('comments') < 0) {\n                    childNames.push('comments');\n                }\n                var childCount = childNames.length;\n                var childPaths = [];\n                for (var i = 0; i < childCount; ++i) {\n                    var childName = childNames[i];\n                    if (!hasOwn.call(value, childName)) {\n                        value[childName] = types.getFieldValue(value, childName);\n                    }\n                    childPaths.push(path.get(childName));\n                }\n                for (var i = 0; i < childCount; ++i) {\n                    visitor.visitWithoutReset(childPaths[i]);\n                }\n            }\n            return path.value;\n        }\n        PVp.acquireContext = function (path) {\n            if (this._reusableContextStack.length === 0) {\n                return new this.Context(path);\n            }\n            return this._reusableContextStack.pop().reset(path);\n        };\n        PVp.releaseContext = function (context) {\n            if (!(context instanceof this.Context)) {\n                throw new Error('');\n            }\n            this._reusableContextStack.push(context);\n            context.currentPath = null;\n        };\n        PVp.reportChanged = function () {\n            this._changeReported = true;\n        };\n        PVp.wasChangeReported = function () {\n            return this._changeReported;\n        };\n        function makeContextConstructor(visitor) {\n            function Context(path) {\n                if (!(this instanceof Context)) {\n                    throw new Error('');\n                }\n                if (!(this instanceof PathVisitor)) {\n                    throw new Error('');\n                }\n                if (!(path instanceof NodePath)) {\n                    throw new Error('');\n                }\n                Object.defineProperty(this, 'visitor', {\n                    value: visitor,\n                    writable: false,\n                    enumerable: true,\n                    configurable: false\n                });\n                this.currentPath = path;\n                this.needToCallTraverse = true;\n                Object.seal(this);\n            }\n            if (!(visitor instanceof PathVisitor)) {\n                throw new Error('');\n            }\n            var Cp = Context.prototype = Object.create(visitor);\n            Cp.constructor = Context;\n            extend(Cp, sharedContextProtoMethods);\n            return Context;\n        }\n        var sharedContextProtoMethods = Object.create(null);\n        sharedContextProtoMethods.reset = function reset(path) {\n            if (!(this instanceof this.Context)) {\n                throw new Error('');\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error('');\n            }\n            this.currentPath = path;\n            this.needToCallTraverse = true;\n            return this;\n        };\n        sharedContextProtoMethods.invokeVisitorMethod = function invokeVisitorMethod(methodName) {\n            if (!(this instanceof this.Context)) {\n                throw new Error('');\n            }\n            if (!(this.currentPath instanceof NodePath)) {\n                throw new Error('');\n            }\n            var result = this.visitor[methodName].call(this, this.currentPath);\n            if (result === false) {\n                this.needToCallTraverse = false;\n            } else if (result !== undefined) {\n                this.currentPath = this.currentPath.replace(result)[0];\n                if (this.needToCallTraverse) {\n                    this.traverse(this.currentPath);\n                }\n            }\n            if (this.needToCallTraverse !== false) {\n                throw new Error('Must either call this.traverse or return false in ' + methodName);\n            }\n            var path = this.currentPath;\n            return path && path.value;\n        };\n        sharedContextProtoMethods.traverse = function traverse(path, newVisitor) {\n            if (!(this instanceof this.Context)) {\n                throw new Error('');\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error('');\n            }\n            if (!(this.currentPath instanceof NodePath)) {\n                throw new Error('');\n            }\n            this.needToCallTraverse = false;\n            return visitChildren(path, PathVisitor.fromMethodsObject(newVisitor || this.visitor));\n        };\n        sharedContextProtoMethods.visit = function visit(path, newVisitor) {\n            if (!(this instanceof this.Context)) {\n                throw new Error('');\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error('');\n            }\n            if (!(this.currentPath instanceof NodePath)) {\n                throw new Error('');\n            }\n            this.needToCallTraverse = false;\n            return PathVisitor.fromMethodsObject(newVisitor || this.visitor).visitWithoutReset(path);\n        };\n        sharedContextProtoMethods.reportChanged = function reportChanged() {\n            this.visitor.reportChanged();\n        };\n        sharedContextProtoMethods.abort = function abort() {\n            this.needToCallTraverse = false;\n            this.visitor.abort();\n        };\n        return PathVisitor;\n    };\n});"]}