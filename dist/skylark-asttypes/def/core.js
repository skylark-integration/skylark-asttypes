/**
 * skylark-asttypes - A version of asttypes that ported to running on skylarkjs.
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["./operators/core","../types"],function(r,o){"use strict";return function(e){var t=e.use(o).Type,i=t.def,t=t.or,s=e.use(sharedPlugin),l=s.defaults,s=s.geq,{BinaryOperators:e,AssignmentOperators:n,LogicalOperators:a}=e.use(r),s=(i("Printable").field("loc",t(i("SourceLocation"),null),l.null,!0),i("Node").bases("Printable").field("type",String).field("comments",t([i("Comment")],null),l.null,!0),i("SourceLocation").field("start",i("Position")).field("end",i("Position")).field("source",t(String,null),l.null),i("Position").field("line",s(1)).field("column",s(0)),i("File").bases("Node").build("program","name").field("program",i("Program")).field("name",t(String,null),l.null),i("Program").bases("Node").build("body").field("body",[i("Statement")]),i("Function").bases("Node").field("id",t(i("Identifier"),null),l.null).field("params",[i("Pattern")]).field("body",i("BlockStatement")).field("generator",Boolean,l.false).field("async",Boolean,l.false),i("Statement").bases("Node"),i("EmptyStatement").bases("Statement").build(),i("BlockStatement").bases("Statement").build("body").field("body",[i("Statement")]),i("ExpressionStatement").bases("Statement").build("expression").field("expression",i("Expression")),i("IfStatement").bases("Statement").build("test","consequent","alternate").field("test",i("Expression")).field("consequent",i("Statement")).field("alternate",t(i("Statement"),null),l.null),i("LabeledStatement").bases("Statement").build("label","body").field("label",i("Identifier")).field("body",i("Statement")),i("BreakStatement").bases("Statement").build("label").field("label",t(i("Identifier"),null),l.null),i("ContinueStatement").bases("Statement").build("label").field("label",t(i("Identifier"),null),l.null),i("WithStatement").bases("Statement").build("object","body").field("object",i("Expression")).field("body",i("Statement")),i("SwitchStatement").bases("Statement").build("discriminant","cases","lexical").field("discriminant",i("Expression")).field("cases",[i("SwitchCase")]).field("lexical",Boolean,l.false),i("ReturnStatement").bases("Statement").build("argument").field("argument",t(i("Expression"),null)),i("ThrowStatement").bases("Statement").build("argument").field("argument",i("Expression")),i("TryStatement").bases("Statement").build("block","handler","finalizer").field("block",i("BlockStatement")).field("handler",t(i("CatchClause"),null),function(){return this.handlers&&this.handlers[0]||null}).field("handlers",[i("CatchClause")],function(){return this.handler?[this.handler]:[]},!0).field("guardedHandlers",[i("CatchClause")],l.emptyArray).field("finalizer",t(i("BlockStatement"),null),l.null),i("CatchClause").bases("Node").build("param","guard","body").field("param",i("Pattern")).field("guard",t(i("Expression"),null),l.null).field("body",i("BlockStatement")),i("WhileStatement").bases("Statement").build("test","body").field("test",i("Expression")).field("body",i("Statement")),i("DoWhileStatement").bases("Statement").build("body","test").field("body",i("Statement")).field("test",i("Expression")),i("ForStatement").bases("Statement").build("init","test","update","body").field("init",t(i("VariableDeclaration"),i("Expression"),null)).field("test",t(i("Expression"),null)).field("update",t(i("Expression"),null)).field("body",i("Statement")),i("ForInStatement").bases("Statement").build("left","right","body").field("left",t(i("VariableDeclaration"),i("Expression"))).field("right",i("Expression")).field("body",i("Statement")),i("DebuggerStatement").bases("Statement").build(),i("Declaration").bases("Statement"),i("FunctionDeclaration").bases("Function","Declaration").build("id","params","body").field("id",i("Identifier")),i("FunctionExpression").bases("Function","Expression").build("id","params","body"),i("VariableDeclaration").bases("Declaration").build("kind","declarations").field("kind",t("var","let","const")).field("declarations",[i("VariableDeclarator")]),i("VariableDeclarator").bases("Node").build("id","init").field("id",i("Pattern")).field("init",t(i("Expression"),null),l.null),i("Expression").bases("Node"),i("ThisExpression").bases("Expression").build(),i("ArrayExpression").bases("Expression").build("elements").field("elements",[t(i("Expression"),null)]),i("ObjectExpression").bases("Expression").build("properties").field("properties",[i("Property")]),i("Property").bases("Node").build("kind","key","value").field("kind",t("init","get","set")).field("key",t(i("Literal"),i("Identifier"))).field("value",i("Expression")),i("SequenceExpression").bases("Expression").build("expressions").field("expressions",[i("Expression")]),t("-","+","!","~","typeof","void","delete")),s=(i("UnaryExpression").bases("Expression").build("operator","argument","prefix").field("operator",s).field("argument",i("Expression")).field("prefix",Boolean,l.true),t(...e)),e=(i("BinaryExpression").bases("Expression").build("operator","left","right").field("operator",s).field("left",i("Expression")).field("right",i("Expression")),t(...n)),s=(i("AssignmentExpression").bases("Expression").build("operator","left","right").field("operator",e).field("left",t(i("Pattern"),i("MemberExpression"))).field("right",i("Expression")),t("++","--")),n=(i("UpdateExpression").bases("Expression").build("operator","argument","prefix").field("operator",s).field("argument",i("Expression")).field("prefix",Boolean),t(...a));i("LogicalExpression").bases("Expression").build("operator","left","right").field("operator",n).field("left",i("Expression")).field("right",i("Expression")),i("ConditionalExpression").bases("Expression").build("test","consequent","alternate").field("test",i("Expression")).field("consequent",i("Expression")).field("alternate",i("Expression")),i("NewExpression").bases("Expression").build("callee","arguments").field("callee",i("Expression")).field("arguments",[i("Expression")]),i("CallExpression").bases("Expression").build("callee","arguments").field("callee",i("Expression")).field("arguments",[i("Expression")]),i("MemberExpression").bases("Expression").build("object","property","computed").field("object",i("Expression")).field("property",t(i("Identifier"),i("Expression"))).field("computed",Boolean,function(){var e=this.property.type;return"Literal"===e||"MemberExpression"===e||"BinaryExpression"===e}),i("Pattern").bases("Node"),i("SwitchCase").bases("Node").build("test","consequent").field("test",t(i("Expression"),null)).field("consequent",[i("Statement")]),i("Identifier").bases("Expression","Pattern").build("name").field("name",String).field("optional",Boolean,l.false),i("Literal").bases("Expression").build("value").field("value",t(String,Boolean,null,Number,RegExp,BigInt)),i("Comment").bases("Printable").field("value",String).field("leading",Boolean,l.true).field("trailing",Boolean,l.false)}});
//# sourceMappingURL=../sourcemaps/def/core.js.map
