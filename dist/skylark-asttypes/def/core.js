/**
 * skylark-asttypes - A version of asttypes that ported to running on skylarkjs.
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["./operators/core","../types"],function(e,t){"use strict";return function(i){var s=i.use(t).Type,l=s.def,n=s.or,a=i.use(sharedPlugin),r=a.defaults,o=a.geq;const{BinaryOperators:d,AssignmentOperators:b,LogicalOperators:u}=i.use(e);l("Printable").field("loc",n(l("SourceLocation"),null),r.null,!0),l("Node").bases("Printable").field("type",String).field("comments",n([l("Comment")],null),r.null,!0),l("SourceLocation").field("start",l("Position")).field("end",l("Position")).field("source",n(String,null),r.null),l("Position").field("line",o(1)).field("column",o(0)),l("File").bases("Node").build("program","name").field("program",l("Program")).field("name",n(String,null),r.null),l("Program").bases("Node").build("body").field("body",[l("Statement")]),l("Function").bases("Node").field("id",n(l("Identifier"),null),r.null).field("params",[l("Pattern")]).field("body",l("BlockStatement")).field("generator",Boolean,r.false).field("async",Boolean,r.false),l("Statement").bases("Node"),l("EmptyStatement").bases("Statement").build(),l("BlockStatement").bases("Statement").build("body").field("body",[l("Statement")]),l("ExpressionStatement").bases("Statement").build("expression").field("expression",l("Expression")),l("IfStatement").bases("Statement").build("test","consequent","alternate").field("test",l("Expression")).field("consequent",l("Statement")).field("alternate",n(l("Statement"),null),r.null),l("LabeledStatement").bases("Statement").build("label","body").field("label",l("Identifier")).field("body",l("Statement")),l("BreakStatement").bases("Statement").build("label").field("label",n(l("Identifier"),null),r.null),l("ContinueStatement").bases("Statement").build("label").field("label",n(l("Identifier"),null),r.null),l("WithStatement").bases("Statement").build("object","body").field("object",l("Expression")).field("body",l("Statement")),l("SwitchStatement").bases("Statement").build("discriminant","cases","lexical").field("discriminant",l("Expression")).field("cases",[l("SwitchCase")]).field("lexical",Boolean,r.false),l("ReturnStatement").bases("Statement").build("argument").field("argument",n(l("Expression"),null)),l("ThrowStatement").bases("Statement").build("argument").field("argument",l("Expression")),l("TryStatement").bases("Statement").build("block","handler","finalizer").field("block",l("BlockStatement")).field("handler",n(l("CatchClause"),null),function(){return this.handlers&&this.handlers[0]||null}).field("handlers",[l("CatchClause")],function(){return this.handler?[this.handler]:[]},!0).field("guardedHandlers",[l("CatchClause")],r.emptyArray).field("finalizer",n(l("BlockStatement"),null),r.null),l("CatchClause").bases("Node").build("param","guard","body").field("param",l("Pattern")).field("guard",n(l("Expression"),null),r.null).field("body",l("BlockStatement")),l("WhileStatement").bases("Statement").build("test","body").field("test",l("Expression")).field("body",l("Statement")),l("DoWhileStatement").bases("Statement").build("body","test").field("body",l("Statement")).field("test",l("Expression")),l("ForStatement").bases("Statement").build("init","test","update","body").field("init",n(l("VariableDeclaration"),l("Expression"),null)).field("test",n(l("Expression"),null)).field("update",n(l("Expression"),null)).field("body",l("Statement")),l("ForInStatement").bases("Statement").build("left","right","body").field("left",n(l("VariableDeclaration"),l("Expression"))).field("right",l("Expression")).field("body",l("Statement")),l("DebuggerStatement").bases("Statement").build(),l("Declaration").bases("Statement"),l("FunctionDeclaration").bases("Function","Declaration").build("id","params","body").field("id",l("Identifier")),l("FunctionExpression").bases("Function","Expression").build("id","params","body"),l("VariableDeclaration").bases("Declaration").build("kind","declarations").field("kind",n("var","let","const")).field("declarations",[l("VariableDeclarator")]),l("VariableDeclarator").bases("Node").build("id","init").field("id",l("Pattern")).field("init",n(l("Expression"),null),r.null),l("Expression").bases("Node"),l("ThisExpression").bases("Expression").build(),l("ArrayExpression").bases("Expression").build("elements").field("elements",[n(l("Expression"),null)]),l("ObjectExpression").bases("Expression").build("properties").field("properties",[l("Property")]),l("Property").bases("Node").build("kind","key","value").field("kind",n("init","get","set")).field("key",n(l("Literal"),l("Identifier"))).field("value",l("Expression")),l("SequenceExpression").bases("Expression").build("expressions").field("expressions",[l("Expression")]);var f=n("-","+","!","~","typeof","void","delete");l("UnaryExpression").bases("Expression").build("operator","argument","prefix").field("operator",f).field("argument",l("Expression")).field("prefix",Boolean,r.true);const p=n(...d);l("BinaryExpression").bases("Expression").build("operator","left","right").field("operator",p).field("left",l("Expression")).field("right",l("Expression"));const m=n(...b);l("AssignmentExpression").bases("Expression").build("operator","left","right").field("operator",m).field("left",n(l("Pattern"),l("MemberExpression"))).field("right",l("Expression"));var x=n("++","--");l("UpdateExpression").bases("Expression").build("operator","argument","prefix").field("operator",x).field("argument",l("Expression")).field("prefix",Boolean);var c=n(...u);l("LogicalExpression").bases("Expression").build("operator","left","right").field("operator",c).field("left",l("Expression")).field("right",l("Expression")),l("ConditionalExpression").bases("Expression").build("test","consequent","alternate").field("test",l("Expression")).field("consequent",l("Expression")).field("alternate",l("Expression")),l("NewExpression").bases("Expression").build("callee","arguments").field("callee",l("Expression")).field("arguments",[l("Expression")]),l("CallExpression").bases("Expression").build("callee","arguments").field("callee",l("Expression")).field("arguments",[l("Expression")]),l("MemberExpression").bases("Expression").build("object","property","computed").field("object",l("Expression")).field("property",n(l("Identifier"),l("Expression"))).field("computed",Boolean,function(){var e=this.property.type;return"Literal"===e||"MemberExpression"===e||"BinaryExpression"===e}),l("Pattern").bases("Node"),l("SwitchCase").bases("Node").build("test","consequent").field("test",n(l("Expression"),null)).field("consequent",[l("Statement")]),l("Identifier").bases("Expression","Pattern").build("name").field("name",String).field("optional",Boolean,r.false),l("Literal").bases("Expression").build("value").field("value",n(String,Boolean,null,Number,RegExp,BigInt)),l("Comment").bases("Printable").field("value",String).field("leading",Boolean,r.true).field("trailing",Boolean,r.false)}});
//# sourceMappingURL=../sourcemaps/def/core.js.map
