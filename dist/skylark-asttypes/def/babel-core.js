/**
 * skylark-asttypes - A version of asttypes that ported to running on skylarkjs.
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["./es-proposals","../types"],function(e,i){"use strict";return function(t){t.use(e);const l=t.use(i),r=t.use(sharedPlugin).defaults,a=l.Type.def,s=l.Type.or,{undefined:o}=l.builtInTypes;function d(e=String,i){return["extra",{rawValue:e,raw:String},function(){const e=l.getFieldValue(this,"value");return{rawValue:e,raw:i?i(e):String(e)}}]}a("Noop").bases("Statement").build(),a("DoExpression").bases("Expression").build("body").field("body",[a("Statement")]),a("BindExpression").bases("Expression").build("object","callee").field("object",s(a("Expression"),null)).field("callee",a("Expression")),a("ParenthesizedExpression").bases("Expression").build("expression").field("expression",a("Expression")),a("ExportNamespaceSpecifier").bases("Specifier").build("exported").field("exported",a("Identifier")),a("ExportDefaultSpecifier").bases("Specifier").build("exported").field("exported",a("Identifier")),a("CommentBlock").bases("Comment").build("value","leading","trailing"),a("CommentLine").bases("Comment").build("value","leading","trailing"),a("Directive").bases("Node").build("value").field("value",a("DirectiveLiteral")),a("DirectiveLiteral").bases("Node","Expression").build("value").field("value",String,r["use strict"]),a("InterpreterDirective").bases("Node").build("value").field("value",String),a("BlockStatement").bases("Statement").build("body").field("body",[a("Statement")]).field("directives",[a("Directive")],r.emptyArray),a("Program").bases("Node").build("body").field("body",[a("Statement")]).field("directives",[a("Directive")],r.emptyArray).field("interpreter",s(a("InterpreterDirective"),null),r.null),a("StringLiteral").bases("Literal").build("value").field("value",String).field(...d(String,e=>JSON.stringify(e))),a("NumericLiteral").bases("Literal").build("value").field("value",Number).field("raw",s(String,null),r.null).field(...d(Number)),a("BigIntLiteral").bases("Literal").build("value").field("value",s(String,Number)).field(...d(String,e=>e+"n")),a("DecimalLiteral").bases("Literal").build("value").field("value",String).field(...d(String,e=>e+"m")),a("NullLiteral").bases("Literal").build().field("value",null,r.null),a("BooleanLiteral").bases("Literal").build("value").field("value",Boolean),a("RegExpLiteral").bases("Literal").build("pattern","flags").field("pattern",String).field("flags",String).field("value",RegExp,function(){return new RegExp(this.pattern,this.flags)}).field(...d(s(RegExp,o),e=>`/${e.pattern}/${e.flags||""}`)).field("regex",{pattern:String,flags:String},function(){return{pattern:this.pattern,flags:this.flags}});var n=s(a("Property"),a("ObjectMethod"),a("ObjectProperty"),a("SpreadProperty"),a("SpreadElement"));a("ObjectExpression").bases("Expression").build("properties").field("properties",[n]),a("ObjectMethod").bases("Node","Function").build("kind","key","params","body","computed").field("kind",s("method","get","set")).field("key",s(a("Literal"),a("Identifier"),a("Expression"))).field("params",[a("Pattern")]).field("body",a("BlockStatement")).field("computed",Boolean,r.false).field("generator",Boolean,r.false).field("async",Boolean,r.false).field("accessibility",s(a("Literal"),null),r.null).field("decorators",s([a("Decorator")],null),r.null),a("ObjectProperty").bases("Node").build("key","value").field("key",s(a("Literal"),a("Identifier"),a("Expression"))).field("value",s(a("Expression"),a("Pattern"))).field("accessibility",s(a("Literal"),null),r.null).field("computed",Boolean,r.false);var u=s(a("MethodDefinition"),a("VariableDeclarator"),a("ClassPropertyDefinition"),a("ClassProperty"),a("ClassPrivateProperty"),a("ClassMethod"),a("ClassPrivateMethod"),a("ClassAccessorProperty"),a("StaticBlock"));a("ClassBody").bases("Declaration").build("body").field("body",[u]),a("ClassMethod").bases("Declaration","Function").build("kind","key","params","body","computed","static").field("key",s(a("Literal"),a("Identifier"),a("Expression"))),a("ClassPrivateMethod").bases("Declaration","Function").build("key","params","body","kind","computed","static").field("key",a("PrivateName")),a("ClassAccessorProperty").bases("Declaration").build("key","value","decorators","computed","static").field("key",s(a("Literal"),a("Identifier"),a("PrivateName"),a("Expression"))).field("value",s(a("Expression"),null),r.null),["ClassMethod","ClassPrivateMethod"].forEach(e=>{a(e).field("kind",s("get","set","method","constructor"),()=>"method").field("body",a("BlockStatement")).field("access",s("public","private","protected",null),r.null)}),["ClassMethod","ClassPrivateMethod","ClassAccessorProperty"].forEach(e=>{a(e).field("computed",Boolean,r.false).field("static",Boolean,r.false).field("abstract",Boolean,r.false).field("accessibility",s("public","private","protected",null),r.null).field("decorators",s([a("Decorator")],null),r.null).field("definite",Boolean,r.false).field("optional",Boolean,r.false).field("override",Boolean,r.false).field("readonly",Boolean,r.false)});var f=s(a("Property"),a("PropertyPattern"),a("SpreadPropertyPattern"),a("SpreadProperty"),a("ObjectProperty"),a("RestProperty"),a("RestElement"));a("ObjectPattern").bases("Pattern").build("properties").field("properties",[f]).field("decorators",s([a("Decorator")],null),r.null),a("SpreadProperty").bases("Node").build("argument").field("argument",a("Expression")),a("RestProperty").bases("Node").build("argument").field("argument",a("Expression")),a("ForAwaitStatement").bases("Statement").build("left","right","body").field("left",s(a("VariableDeclaration"),a("Expression"))).field("right",a("Expression")).field("body",a("Statement")),a("Import").bases("Expression").build()}});
//# sourceMappingURL=../sourcemaps/def/babel-core.js.map
