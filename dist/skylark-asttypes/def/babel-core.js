/**
 * skylark-asttypes - A version of asttypes that ported to running on skylarkjs.
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["./es-proposals","../types"],function(s,o){"use strict";return function(e){e.use(s);const t=e.use(o),i=e.use(sharedPlugin).defaults,l=t.Type.def,r=t.Type.or;e=t.builtInTypes[void 0];function a(e=String,i){return["extra",{rawValue:e,raw:String},function(){var e=t.getFieldValue(this,"value");return{rawValue:e,raw:(i||String)(e)}}]}l("Noop").bases("Statement").build(),l("DoExpression").bases("Expression").build("body").field("body",[l("Statement")]),l("BindExpression").bases("Expression").build("object","callee").field("object",r(l("Expression"),null)).field("callee",l("Expression")),l("ParenthesizedExpression").bases("Expression").build("expression").field("expression",l("Expression")),l("ExportNamespaceSpecifier").bases("Specifier").build("exported").field("exported",l("Identifier")),l("ExportDefaultSpecifier").bases("Specifier").build("exported").field("exported",l("Identifier")),l("CommentBlock").bases("Comment").build("value","leading","trailing"),l("CommentLine").bases("Comment").build("value","leading","trailing"),l("Directive").bases("Node").build("value").field("value",l("DirectiveLiteral")),l("DirectiveLiteral").bases("Node","Expression").build("value").field("value",String,i["use strict"]),l("InterpreterDirective").bases("Node").build("value").field("value",String),l("BlockStatement").bases("Statement").build("body").field("body",[l("Statement")]).field("directives",[l("Directive")],i.emptyArray),l("Program").bases("Node").build("body").field("body",[l("Statement")]).field("directives",[l("Directive")],i.emptyArray).field("interpreter",r(l("InterpreterDirective"),null),i.null),l("StringLiteral").bases("Literal").build("value").field("value",String).field(...a(String,e=>JSON.stringify(e))),l("NumericLiteral").bases("Literal").build("value").field("value",Number).field("raw",r(String,null),i.null).field(...a(Number)),l("BigIntLiteral").bases("Literal").build("value").field("value",r(String,Number)).field(...a(String,e=>e+"n")),l("DecimalLiteral").bases("Literal").build("value").field("value",String).field(...a(String,e=>e+"m")),l("NullLiteral").bases("Literal").build().field("value",null,i.null),l("BooleanLiteral").bases("Literal").build("value").field("value",Boolean),l("RegExpLiteral").bases("Literal").build("pattern","flags").field("pattern",String).field("flags",String).field("value",RegExp,function(){return new RegExp(this.pattern,this.flags)}).field(...a(r(RegExp,e),e=>`/${e.pattern}/`+(e.flags||""))).field("regex",{pattern:String,flags:String},function(){return{pattern:this.pattern,flags:this.flags}});e=r(l("Property"),l("ObjectMethod"),l("ObjectProperty"),l("SpreadProperty"),l("SpreadElement")),l("ObjectExpression").bases("Expression").build("properties").field("properties",[e]),l("ObjectMethod").bases("Node","Function").build("kind","key","params","body","computed").field("kind",r("method","get","set")).field("key",r(l("Literal"),l("Identifier"),l("Expression"))).field("params",[l("Pattern")]).field("body",l("BlockStatement")).field("computed",Boolean,i.false).field("generator",Boolean,i.false).field("async",Boolean,i.false).field("accessibility",r(l("Literal"),null),i.null).field("decorators",r([l("Decorator")],null),i.null),l("ObjectProperty").bases("Node").build("key","value").field("key",r(l("Literal"),l("Identifier"),l("Expression"))).field("value",r(l("Expression"),l("Pattern"))).field("accessibility",r(l("Literal"),null),i.null).field("computed",Boolean,i.false),e=r(l("MethodDefinition"),l("VariableDeclarator"),l("ClassPropertyDefinition"),l("ClassProperty"),l("ClassPrivateProperty"),l("ClassMethod"),l("ClassPrivateMethod"),l("ClassAccessorProperty"),l("StaticBlock")),l("ClassBody").bases("Declaration").build("body").field("body",[e]),l("ClassMethod").bases("Declaration","Function").build("kind","key","params","body","computed","static").field("key",r(l("Literal"),l("Identifier"),l("Expression"))),l("ClassPrivateMethod").bases("Declaration","Function").build("key","params","body","kind","computed","static").field("key",l("PrivateName")),l("ClassAccessorProperty").bases("Declaration").build("key","value","decorators","computed","static").field("key",r(l("Literal"),l("Identifier"),l("PrivateName"),l("Expression"))).field("value",r(l("Expression"),null),i.null),["ClassMethod","ClassPrivateMethod"].forEach(e=>{l(e).field("kind",r("get","set","method","constructor"),()=>"method").field("body",l("BlockStatement")).field("access",r("public","private","protected",null),i.null)}),["ClassMethod","ClassPrivateMethod","ClassAccessorProperty"].forEach(e=>{l(e).field("computed",Boolean,i.false).field("static",Boolean,i.false).field("abstract",Boolean,i.false).field("accessibility",r("public","private","protected",null),i.null).field("decorators",r([l("Decorator")],null),i.null).field("definite",Boolean,i.false).field("optional",Boolean,i.false).field("override",Boolean,i.false).field("readonly",Boolean,i.false)}),e=r(l("Property"),l("PropertyPattern"),l("SpreadPropertyPattern"),l("SpreadProperty"),l("ObjectProperty"),l("RestProperty"),l("RestElement"));l("ObjectPattern").bases("Pattern").build("properties").field("properties",[e]).field("decorators",r([l("Decorator")],null),i.null),l("SpreadProperty").bases("Node").build("argument").field("argument",l("Expression")),l("RestProperty").bases("Node").build("argument").field("argument",l("Expression")),l("ForAwaitStatement").bases("Statement").build("left","right","body").field("left",r(l("VariableDeclaration"),l("Expression"))).field("right",l("Expression")).field("body",l("Statement")),l("Import").bases("Expression").build()}});
//# sourceMappingURL=../sourcemaps/def/babel-core.js.map
