/**
 * skylark-asttypes - A version of asttypes that ported to running on skylarkjs.
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["./es-proposals","./type-annotations","../types","../shared"],function(n,t,o,d){"use strict";return function(e){e.use(n),e.use(t);var i=e.use(o),l=i.Type.def,i=i.Type.or,e=e.use(d).defaults,a=(l("Flow").bases("Node"),l("FlowType").bases("Flow"),l("AnyTypeAnnotation").bases("FlowType").build(),l("EmptyTypeAnnotation").bases("FlowType").build(),l("MixedTypeAnnotation").bases("FlowType").build(),l("VoidTypeAnnotation").bases("FlowType").build(),l("SymbolTypeAnnotation").bases("FlowType").build(),l("NumberTypeAnnotation").bases("FlowType").build(),l("BigIntTypeAnnotation").bases("FlowType").build(),l("NumberLiteralTypeAnnotation").bases("FlowType").build("value","raw").field("value",Number).field("raw",String),l("NumericLiteralTypeAnnotation").bases("FlowType").build("value","raw").field("value",Number).field("raw",String),l("BigIntLiteralTypeAnnotation").bases("FlowType").build("value","raw").field("value",null).field("raw",String),l("StringTypeAnnotation").bases("FlowType").build(),l("StringLiteralTypeAnnotation").bases("FlowType").build("value","raw").field("value",String).field("raw",String),l("BooleanTypeAnnotation").bases("FlowType").build(),l("BooleanLiteralTypeAnnotation").bases("FlowType").build("value","raw").field("value",Boolean).field("raw",String),l("TypeAnnotation").bases("Node").build("typeAnnotation").field("typeAnnotation",l("FlowType")),l("NullableTypeAnnotation").bases("FlowType").build("typeAnnotation").field("typeAnnotation",l("FlowType")),l("NullLiteralTypeAnnotation").bases("FlowType").build(),l("NullTypeAnnotation").bases("FlowType").build(),l("ThisTypeAnnotation").bases("FlowType").build(),l("ExistsTypeAnnotation").bases("FlowType").build(),l("ExistentialTypeParam").bases("FlowType").build(),l("FunctionTypeAnnotation").bases("FlowType").build("params","returnType","rest","typeParameters").field("params",[l("FunctionTypeParam")]).field("returnType",l("FlowType")).field("rest",i(l("FunctionTypeParam"),null)).field("typeParameters",i(l("TypeParameterDeclaration"),null)),l("FunctionTypeParam").bases("Node").build("name","typeAnnotation","optional").field("name",i(l("Identifier"),null)).field("typeAnnotation",l("FlowType")).field("optional",Boolean),l("ArrayTypeAnnotation").bases("FlowType").build("elementType").field("elementType",l("FlowType")),l("ObjectTypeAnnotation").bases("FlowType").build("properties","indexers","callProperties").field("properties",[i(l("ObjectTypeProperty"),l("ObjectTypeSpreadProperty"))]).field("indexers",[l("ObjectTypeIndexer")],e.emptyArray).field("callProperties",[l("ObjectTypeCallProperty")],e.emptyArray).field("inexact",i(Boolean,void 0),e[void 0]).field("exact",Boolean,e.false).field("internalSlots",[l("ObjectTypeInternalSlot")],e.emptyArray),l("Variance").bases("Node").build("kind").field("kind",i("plus","minus")),i(l("Variance"),"plus","minus",null));l("ObjectTypeProperty").bases("Node").build("key","value","optional").field("key",i(l("Literal"),l("Identifier"))).field("value",l("FlowType")).field("optional",Boolean).field("variance",a,e.null),l("ObjectTypeIndexer").bases("Node").build("id","key","value").field("id",l("Identifier")).field("key",l("FlowType")).field("value",l("FlowType")).field("variance",a,e.null).field("static",Boolean,e.false),l("ObjectTypeCallProperty").bases("Node").build("value").field("value",l("FunctionTypeAnnotation")).field("static",Boolean,e.false),l("QualifiedTypeIdentifier").bases("Node").build("qualification","id").field("qualification",i(l("Identifier"),l("QualifiedTypeIdentifier"))).field("id",l("Identifier")),l("GenericTypeAnnotation").bases("FlowType").build("id","typeParameters").field("id",i(l("Identifier"),l("QualifiedTypeIdentifier"))).field("typeParameters",i(l("TypeParameterInstantiation"),null)),l("MemberTypeAnnotation").bases("FlowType").build("object","property").field("object",l("Identifier")).field("property",i(l("MemberTypeAnnotation"),l("GenericTypeAnnotation"))),l("IndexedAccessType").bases("FlowType").build("objectType","indexType").field("objectType",l("FlowType")).field("indexType",l("FlowType")),l("OptionalIndexedAccessType").bases("FlowType").build("objectType","indexType","optional").field("objectType",l("FlowType")).field("indexType",l("FlowType")).field("optional",Boolean),l("UnionTypeAnnotation").bases("FlowType").build("types").field("types",[l("FlowType")]),l("IntersectionTypeAnnotation").bases("FlowType").build("types").field("types",[l("FlowType")]),l("TypeofTypeAnnotation").bases("FlowType").build("argument").field("argument",l("FlowType")),l("ObjectTypeSpreadProperty").bases("Node").build("argument").field("argument",l("FlowType")),l("ObjectTypeInternalSlot").bases("Node").build("id","value","optional","static","method").field("id",l("Identifier")).field("value",l("FlowType")).field("optional",Boolean).field("static",Boolean).field("method",Boolean),l("TypeParameterDeclaration").bases("Node").build("params").field("params",[l("TypeParameter")]),l("TypeParameterInstantiation").bases("Node").build("params").field("params",[l("FlowType")]),l("TypeParameter").bases("FlowType").build("name","variance","bound","default").field("name",String).field("variance",a,e.null).field("bound",i(l("TypeAnnotation"),null),e.null).field("default",i(l("FlowType"),null),e.null),l("ClassProperty").field("variance",a,e.null),l("ClassImplements").bases("Node").build("id").field("id",l("Identifier")).field("superClass",i(l("Expression"),null),e.null).field("typeParameters",i(l("TypeParameterInstantiation"),null),e.null),l("InterfaceTypeAnnotation").bases("FlowType").build("body","extends").field("body",l("ObjectTypeAnnotation")).field("extends",i([l("InterfaceExtends")],null),e.null),l("InterfaceDeclaration").bases("Declaration").build("id","body","extends").field("id",l("Identifier")).field("typeParameters",i(l("TypeParameterDeclaration"),null),e.null).field("body",l("ObjectTypeAnnotation")).field("extends",[l("InterfaceExtends")]),l("DeclareInterface").bases("InterfaceDeclaration").build("id","body","extends"),l("InterfaceExtends").bases("Node").build("id").field("id",l("Identifier")).field("typeParameters",i(l("TypeParameterInstantiation"),null),e.null),l("TypeAlias").bases("Declaration").build("id","typeParameters","right").field("id",l("Identifier")).field("typeParameters",i(l("TypeParameterDeclaration"),null)).field("right",l("FlowType")),l("DeclareTypeAlias").bases("TypeAlias").build("id","typeParameters","right"),l("OpaqueType").bases("Declaration").build("id","typeParameters","impltype","supertype").field("id",l("Identifier")).field("typeParameters",i(l("TypeParameterDeclaration"),null)).field("impltype",l("FlowType")).field("supertype",i(l("FlowType"),null)),l("DeclareOpaqueType").bases("OpaqueType").build("id","typeParameters","supertype").field("impltype",i(l("FlowType"),null)),l("TypeCastExpression").bases("Expression").build("expression","typeAnnotation").field("expression",l("Expression")).field("typeAnnotation",l("TypeAnnotation")),l("TupleTypeAnnotation").bases("FlowType").build("types").field("types",[l("FlowType")]),l("DeclareVariable").bases("Statement").build("id").field("id",l("Identifier")),l("DeclareFunction").bases("Statement").build("id").field("id",l("Identifier")).field("predicate",i(l("FlowPredicate"),null),e.null),l("DeclareClass").bases("InterfaceDeclaration").build("id"),l("DeclareModule").bases("Statement").build("id","body").field("id",i(l("Identifier"),l("Literal"))).field("body",l("BlockStatement")),l("DeclareModuleExports").bases("Statement").build("typeAnnotation").field("typeAnnotation",l("TypeAnnotation")),l("DeclareExportDeclaration").bases("Declaration").build("default","declaration","specifiers","source").field("default",Boolean).field("declaration",i(l("DeclareVariable"),l("DeclareFunction"),l("DeclareClass"),l("FlowType"),l("TypeAlias"),l("DeclareOpaqueType"),l("InterfaceDeclaration"),null)).field("specifiers",[i(l("ExportSpecifier"),l("ExportBatchSpecifier"))],e.emptyArray).field("source",i(l("Literal"),null),e.null),l("DeclareExportAllDeclaration").bases("Declaration").build("source").field("source",i(l("Literal"),null),e.null),l("ImportDeclaration").field("importKind",i("value","type","typeof"),()=>"value"),l("FlowPredicate").bases("Flow"),l("InferredPredicate").bases("FlowPredicate").build(),l("DeclaredPredicate").bases("FlowPredicate").build("value").field("value",l("Expression")),l("Function").field("predicate",i(l("FlowPredicate"),null),e.null),l("CallExpression").field("typeArguments",i(null,l("TypeParameterInstantiation")),e.null),l("NewExpression").field("typeArguments",i(null,l("TypeParameterInstantiation")),e.null),l("EnumDeclaration").bases("Declaration").build("id","body").field("id",l("Identifier")).field("body",i(l("EnumBooleanBody"),l("EnumNumberBody"),l("EnumStringBody"),l("EnumSymbolBody"))),l("EnumBooleanBody").build("members","explicitType").field("members",[l("EnumBooleanMember")]).field("explicitType",Boolean),l("EnumNumberBody").build("members","explicitType").field("members",[l("EnumNumberMember")]).field("explicitType",Boolean),l("EnumStringBody").build("members","explicitType").field("members",i([l("EnumStringMember")],[l("EnumDefaultedMember")])).field("explicitType",Boolean),l("EnumSymbolBody").build("members").field("members",[l("EnumDefaultedMember")]),l("EnumBooleanMember").build("id","init").field("id",l("Identifier")).field("init",i(l("Literal"),Boolean)),l("EnumNumberMember").build("id","init").field("id",l("Identifier")).field("init",l("Literal")),l("EnumStringMember").build("id","init").field("id",l("Identifier")).field("init",l("Literal")),l("EnumDefaultedMember").build("id").field("id",l("Identifier"))}});
//# sourceMappingURL=../sourcemaps/def/flow.js.map
