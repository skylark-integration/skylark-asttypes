/**
 * skylark-asttypes - A version of asttypes that ported to running on skylarkjs.
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["./core","../types","../shared"],function(r,t,a){"use strict";return function(e){e.use(r);var i=e.use(t),l=i.Type.def,i=i.Type.or,e=e.use(a).defaults,s=(l("Function").field("generator",Boolean,e.false).field("expression",Boolean,e.false).field("defaults",[i(l("Expression"),null)],e.emptyArray).field("rest",i(l("Identifier"),null),e.null),l("RestElement").bases("Pattern").build("argument").field("argument",l("Pattern")).field("typeAnnotation",i(l("TypeAnnotation"),l("TSTypeAnnotation"),null),e.null),l("SpreadElementPattern").bases("Pattern").build("argument").field("argument",l("Pattern")),l("FunctionDeclaration").build("id","params","body","generator","expression").field("id",i(l("Identifier"),null)),l("FunctionExpression").build("id","params","body","generator","expression"),l("ArrowFunctionExpression").bases("Function","Expression").build("params","body","expression").field("id",null,e.null).field("body",i(l("BlockStatement"),l("Expression"))).field("generator",!1,e.false),l("ForOfStatement").bases("Statement").build("left","right","body").field("left",i(l("VariableDeclaration"),l("Pattern"))).field("right",l("Expression")).field("body",l("Statement")),l("YieldExpression").bases("Expression").build("argument","delegate").field("argument",i(l("Expression"),null)).field("delegate",Boolean,e.false),l("GeneratorExpression").bases("Expression").build("body","blocks","filter").field("body",l("Expression")).field("blocks",[l("ComprehensionBlock")]).field("filter",i(l("Expression"),null)),l("ComprehensionExpression").bases("Expression").build("body","blocks","filter").field("body",l("Expression")).field("blocks",[l("ComprehensionBlock")]).field("filter",i(l("Expression"),null)),l("ComprehensionBlock").bases("Node").build("left","right","each").field("left",l("Pattern")).field("right",l("Expression")).field("each",Boolean),l("Property").field("key",i(l("Literal"),l("Identifier"),l("Expression"))).field("value",i(l("Expression"),l("Pattern"))).field("method",Boolean,e.false).field("shorthand",Boolean,e.false).field("computed",Boolean,e.false),l("ObjectProperty").field("shorthand",Boolean,e.false),l("PropertyPattern").bases("Pattern").build("key","pattern").field("key",i(l("Literal"),l("Identifier"),l("Expression"))).field("pattern",l("Pattern")).field("computed",Boolean,e.false),l("ObjectPattern").bases("Pattern").build("properties").field("properties",[i(l("PropertyPattern"),l("Property"))]),l("ArrayPattern").bases("Pattern").build("elements").field("elements",[i(l("Pattern"),null)]),l("SpreadElement").bases("Node").build("argument").field("argument",l("Expression")),l("ArrayExpression").field("elements",[i(l("Expression"),l("SpreadElement"),l("RestElement"),null)]),l("NewExpression").field("arguments",[i(l("Expression"),l("SpreadElement"))]),l("CallExpression").field("arguments",[i(l("Expression"),l("SpreadElement"))]),l("AssignmentPattern").bases("Pattern").build("left","right").field("left",l("Pattern")).field("right",l("Expression")),l("MethodDefinition").bases("Declaration").build("kind","key","value","static").field("kind",i("constructor","method","get","set")).field("key",l("Expression")).field("value",l("Function")).field("computed",Boolean,e.false).field("static",Boolean,e.false),i(l("MethodDefinition"),l("VariableDeclarator"),l("ClassPropertyDefinition"),l("ClassProperty"),l("StaticBlock")));l("ClassProperty").bases("Declaration").build("key").field("key",i(l("Literal"),l("Identifier"),l("Expression"))).field("computed",Boolean,e.false),l("ClassPropertyDefinition").bases("Declaration").build("definition").field("definition",s),l("ClassBody").bases("Declaration").build("body").field("body",[s]),l("ClassDeclaration").bases("Declaration").build("id","body","superClass").field("id",i(l("Identifier"),null)).field("body",l("ClassBody")).field("superClass",i(l("Expression"),null),e.null),l("ClassExpression").bases("Expression").build("id","body","superClass").field("id",i(l("Identifier"),null),e.null).field("body",l("ClassBody")).field("superClass",i(l("Expression"),null),e.null),l("Super").bases("Expression").build(),l("Specifier").bases("Node"),l("ModuleSpecifier").bases("Specifier").field("local",i(l("Identifier"),null),e.null).field("id",i(l("Identifier"),null),e.null).field("name",i(l("Identifier"),null),e.null),l("ImportSpecifier").bases("ModuleSpecifier").build("imported","local").field("imported",l("Identifier")),l("ImportDefaultSpecifier").bases("ModuleSpecifier").build("local"),l("ImportNamespaceSpecifier").bases("ModuleSpecifier").build("local"),l("ImportDeclaration").bases("Declaration").build("specifiers","source","importKind").field("specifiers",[i(l("ImportSpecifier"),l("ImportNamespaceSpecifier"),l("ImportDefaultSpecifier"))],e.emptyArray).field("source",l("Literal")).field("importKind",i("value","type"),function(){return"value"}),l("ExportNamedDeclaration").bases("Declaration").build("declaration","specifiers","source").field("declaration",i(l("Declaration"),null)).field("specifiers",[l("ExportSpecifier")],e.emptyArray).field("source",i(l("Literal"),null),e.null),l("ExportSpecifier").bases("ModuleSpecifier").build("local","exported").field("exported",l("Identifier")),l("ExportDefaultDeclaration").bases("Declaration").build("declaration").field("declaration",i(l("Declaration"),l("Expression"))),l("ExportAllDeclaration").bases("Declaration").build("source").field("source",l("Literal")),l("TaggedTemplateExpression").bases("Expression").build("tag","quasi").field("tag",l("Expression")).field("quasi",l("TemplateLiteral")),l("TemplateLiteral").bases("Expression").build("quasis","expressions").field("quasis",[l("TemplateElement")]).field("expressions",[l("Expression")]),l("TemplateElement").bases("Node").build("value","tail").field("value",{cooked:String,raw:String}).field("tail",Boolean),l("MetaProperty").bases("Expression").build("meta","property").field("meta",l("Identifier")).field("property",l("Identifier"))}});
//# sourceMappingURL=../sourcemaps/def/es6.js.map
