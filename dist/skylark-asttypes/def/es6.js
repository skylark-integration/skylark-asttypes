/**
 * skylark-asttypes - A version of asttypes that ported to running on skylarkjs.
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["./core","../types","../shared"],function(e,i,l){"use strict";return function(s){s.use(e);const r=s.use(i),t=r.Type.def,n=r.Type.or,a=s.use(l).defaults;t("Function").field("generator",Boolean,a.false).field("expression",Boolean,a.false).field("defaults",[n(t("Expression"),null)],a.emptyArray).field("rest",n(t("Identifier"),null),a.null),t("RestElement").bases("Pattern").build("argument").field("argument",t("Pattern")).field("typeAnnotation",n(t("TypeAnnotation"),t("TSTypeAnnotation"),null),a.null),t("SpreadElementPattern").bases("Pattern").build("argument").field("argument",t("Pattern")),t("FunctionDeclaration").build("id","params","body","generator","expression").field("id",n(t("Identifier"),null)),t("FunctionExpression").build("id","params","body","generator","expression"),t("ArrowFunctionExpression").bases("Function","Expression").build("params","body","expression").field("id",null,a.null).field("body",n(t("BlockStatement"),t("Expression"))).field("generator",!1,a.false),t("ForOfStatement").bases("Statement").build("left","right","body").field("left",n(t("VariableDeclaration"),t("Pattern"))).field("right",t("Expression")).field("body",t("Statement")),t("YieldExpression").bases("Expression").build("argument","delegate").field("argument",n(t("Expression"),null)).field("delegate",Boolean,a.false),t("GeneratorExpression").bases("Expression").build("body","blocks","filter").field("body",t("Expression")).field("blocks",[t("ComprehensionBlock")]).field("filter",n(t("Expression"),null)),t("ComprehensionExpression").bases("Expression").build("body","blocks","filter").field("body",t("Expression")).field("blocks",[t("ComprehensionBlock")]).field("filter",n(t("Expression"),null)),t("ComprehensionBlock").bases("Node").build("left","right","each").field("left",t("Pattern")).field("right",t("Expression")).field("each",Boolean),t("Property").field("key",n(t("Literal"),t("Identifier"),t("Expression"))).field("value",n(t("Expression"),t("Pattern"))).field("method",Boolean,a.false).field("shorthand",Boolean,a.false).field("computed",Boolean,a.false),t("ObjectProperty").field("shorthand",Boolean,a.false),t("PropertyPattern").bases("Pattern").build("key","pattern").field("key",n(t("Literal"),t("Identifier"),t("Expression"))).field("pattern",t("Pattern")).field("computed",Boolean,a.false),t("ObjectPattern").bases("Pattern").build("properties").field("properties",[n(t("PropertyPattern"),t("Property"))]),t("ArrayPattern").bases("Pattern").build("elements").field("elements",[n(t("Pattern"),null)]),t("SpreadElement").bases("Node").build("argument").field("argument",t("Expression")),t("ArrayExpression").field("elements",[n(t("Expression"),t("SpreadElement"),t("RestElement"),null)]),t("NewExpression").field("arguments",[n(t("Expression"),t("SpreadElement"))]),t("CallExpression").field("arguments",[n(t("Expression"),t("SpreadElement"))]),t("AssignmentPattern").bases("Pattern").build("left","right").field("left",t("Pattern")).field("right",t("Expression")),t("MethodDefinition").bases("Declaration").build("kind","key","value","static").field("kind",n("constructor","method","get","set")).field("key",t("Expression")).field("value",t("Function")).field("computed",Boolean,a.false).field("static",Boolean,a.false);const o=n(t("MethodDefinition"),t("VariableDeclarator"),t("ClassPropertyDefinition"),t("ClassProperty"),t("StaticBlock"));t("ClassProperty").bases("Declaration").build("key").field("key",n(t("Literal"),t("Identifier"),t("Expression"))).field("computed",Boolean,a.false),t("ClassPropertyDefinition").bases("Declaration").build("definition").field("definition",o),t("ClassBody").bases("Declaration").build("body").field("body",[o]),t("ClassDeclaration").bases("Declaration").build("id","body","superClass").field("id",n(t("Identifier"),null)).field("body",t("ClassBody")).field("superClass",n(t("Expression"),null),a.null),t("ClassExpression").bases("Expression").build("id","body","superClass").field("id",n(t("Identifier"),null),a.null).field("body",t("ClassBody")).field("superClass",n(t("Expression"),null),a.null),t("Super").bases("Expression").build(),t("Specifier").bases("Node"),t("ModuleSpecifier").bases("Specifier").field("local",n(t("Identifier"),null),a.null).field("id",n(t("Identifier"),null),a.null).field("name",n(t("Identifier"),null),a.null),t("ImportSpecifier").bases("ModuleSpecifier").build("imported","local").field("imported",t("Identifier")),t("ImportDefaultSpecifier").bases("ModuleSpecifier").build("local"),t("ImportNamespaceSpecifier").bases("ModuleSpecifier").build("local"),t("ImportDeclaration").bases("Declaration").build("specifiers","source","importKind").field("specifiers",[n(t("ImportSpecifier"),t("ImportNamespaceSpecifier"),t("ImportDefaultSpecifier"))],a.emptyArray).field("source",t("Literal")).field("importKind",n("value","type"),function(){return"value"}),t("ExportNamedDeclaration").bases("Declaration").build("declaration","specifiers","source").field("declaration",n(t("Declaration"),null)).field("specifiers",[t("ExportSpecifier")],a.emptyArray).field("source",n(t("Literal"),null),a.null),t("ExportSpecifier").bases("ModuleSpecifier").build("local","exported").field("exported",t("Identifier")),t("ExportDefaultDeclaration").bases("Declaration").build("declaration").field("declaration",n(t("Declaration"),t("Expression"))),t("ExportAllDeclaration").bases("Declaration").build("source").field("source",t("Literal")),t("TaggedTemplateExpression").bases("Expression").build("tag","quasi").field("tag",t("Expression")).field("quasi",t("TemplateLiteral")),t("TemplateLiteral").bases("Expression").build("quasis","expressions").field("quasis",[t("TemplateElement")]).field("expressions",[t("Expression")]),t("TemplateElement").bases("Node").build("value","tail").field("value",{cooked:String,raw:String}).field("tail",Boolean),t("MetaProperty").bases("Expression").build("meta","property").field("meta",t("Identifier")).field("property",t("Identifier"))}});
//# sourceMappingURL=../sourcemaps/def/es6.js.map
